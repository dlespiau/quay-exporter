// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChangeVisibility Change the visibility for the repository.
// swagger:model ChangeVisibility
type ChangeVisibility struct {

	// Visibility which the repository will start with
	// Required: true
	Visibility *string `json:"visibility"`
}

// Validate validates this change visibility
func (m *ChangeVisibility) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVisibility(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var changeVisibilityTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public","private"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		changeVisibilityTypeVisibilityPropEnum = append(changeVisibilityTypeVisibilityPropEnum, v)
	}
}

const (
	// ChangeVisibilityVisibilityPublic captures enum value "public"
	ChangeVisibilityVisibilityPublic string = "public"
	// ChangeVisibilityVisibilityPrivate captures enum value "private"
	ChangeVisibilityVisibilityPrivate string = "private"
)

// prop value enum
func (m *ChangeVisibility) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, changeVisibilityTypeVisibilityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ChangeVisibility) validateVisibility(formats strfmt.Registry) error {

	if err := validate.Required("visibility", "body", m.Visibility); err != nil {
		return err
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", *m.Visibility); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChangeVisibility) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChangeVisibility) UnmarshalBinary(b []byte) error {
	var res ChangeVisibility
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
