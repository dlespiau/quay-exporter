// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateMessageMessage A single message
// swagger:model createMessageMessage
type CreateMessageMessage struct {

	// The actual message
	// Required: true
	Content *string `json:"content"`

	// The media type of the message
	// Required: true
	MediaType *string `json:"media_type"`

	// The severity of the message
	// Required: true
	Severity *string `json:"severity"`
}

// Validate validates this create message message
func (m *CreateMessageMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMediaType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMessageMessage) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

var createMessageMessageTypeMediaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text/plain","text/markdown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createMessageMessageTypeMediaTypePropEnum = append(createMessageMessageTypeMediaTypePropEnum, v)
	}
}

const (
	// CreateMessageMessageMediaTypeTextPlain captures enum value "text/plain"
	CreateMessageMessageMediaTypeTextPlain string = "text/plain"
	// CreateMessageMessageMediaTypeTextMarkdown captures enum value "text/markdown"
	CreateMessageMessageMediaTypeTextMarkdown string = "text/markdown"
)

// prop value enum
func (m *CreateMessageMessage) validateMediaTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createMessageMessageTypeMediaTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateMessageMessage) validateMediaType(formats strfmt.Registry) error {

	if err := validate.Required("media_type", "body", m.MediaType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMediaTypeEnum("media_type", "body", *m.MediaType); err != nil {
		return err
	}

	return nil
}

var createMessageMessageTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["info","warning","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createMessageMessageTypeSeverityPropEnum = append(createMessageMessageTypeSeverityPropEnum, v)
	}
}

const (
	// CreateMessageMessageSeverityInfo captures enum value "info"
	CreateMessageMessageSeverityInfo string = "info"
	// CreateMessageMessageSeverityWarning captures enum value "warning"
	CreateMessageMessageSeverityWarning string = "warning"
	// CreateMessageMessageSeverityError captures enum value "error"
	CreateMessageMessageSeverityError string = "error"
)

// prop value enum
func (m *CreateMessageMessage) validateSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createMessageMessageTypeSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateMessageMessage) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", *m.Severity); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateMessageMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateMessageMessage) UnmarshalBinary(b []byte) error {
	var res CreateMessageMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
