// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewPrototype Description of a new prototype
// swagger:model NewPrototype
type NewPrototype struct {

	// activating user
	ActivatingUser *NewPrototypeActivatingUser `json:"activating_user,omitempty"`

	// delegate
	// Required: true
	Delegate *NewPrototypeDelegate `json:"delegate"`

	// Role that should be applied to the delegate
	// Required: true
	Role *string `json:"role"`
}

// Validate validates this new prototype
func (m *NewPrototype) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivatingUser(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDelegate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewPrototype) validateActivatingUser(formats strfmt.Registry) error {

	if swag.IsZero(m.ActivatingUser) { // not required
		return nil
	}

	if m.ActivatingUser != nil {

		if err := m.ActivatingUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activating_user")
			}
			return err
		}
	}

	return nil
}

func (m *NewPrototype) validateDelegate(formats strfmt.Registry) error {

	if err := validate.Required("delegate", "body", m.Delegate); err != nil {
		return err
	}

	if m.Delegate != nil {

		if err := m.Delegate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delegate")
			}
			return err
		}
	}

	return nil
}

var newPrototypeTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["read","write","admin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		newPrototypeTypeRolePropEnum = append(newPrototypeTypeRolePropEnum, v)
	}
}

const (
	// NewPrototypeRoleRead captures enum value "read"
	NewPrototypeRoleRead string = "read"
	// NewPrototypeRoleWrite captures enum value "write"
	NewPrototypeRoleWrite string = "write"
	// NewPrototypeRoleAdmin captures enum value "admin"
	NewPrototypeRoleAdmin string = "admin"
)

// prop value enum
func (m *NewPrototype) validateRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, newPrototypeTypeRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NewPrototype) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewPrototype) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewPrototype) UnmarshalBinary(b []byte) error {
	var res NewPrototype
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
