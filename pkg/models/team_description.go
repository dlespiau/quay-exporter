// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TeamDescription Description of a team
// swagger:model TeamDescription
type TeamDescription struct {

	// Markdown description for the team
	Description string `json:"description,omitempty"`

	// Org wide permissions that should apply to the team
	// Required: true
	Role *string `json:"role"`
}

// Validate validates this team description
func (m *TeamDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var teamDescriptionTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["member","creator","admin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		teamDescriptionTypeRolePropEnum = append(teamDescriptionTypeRolePropEnum, v)
	}
}

const (
	// TeamDescriptionRoleMember captures enum value "member"
	TeamDescriptionRoleMember string = "member"
	// TeamDescriptionRoleCreator captures enum value "creator"
	TeamDescriptionRoleCreator string = "creator"
	// TeamDescriptionRoleAdmin captures enum value "admin"
	TeamDescriptionRoleAdmin string = "admin"
)

// prop value enum
func (m *TeamDescription) validateRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, teamDescriptionTypeRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TeamDescription) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TeamDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamDescription) UnmarshalBinary(b []byte) error {
	var res TeamDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
