// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateOrg Description of updates for an existing organization
// swagger:model UpdateOrg
type UpdateOrg struct {

	// Organization contact email
	Email string `json:"email,omitempty"`

	// Whether the organization desires to receive emails for invoices
	InvoiceEmail bool `json:"invoice_email,omitempty"`

	// The email address at which to receive invoices
	InvoiceEmailAddress string `json:"invoice_email_address,omitempty"`

	// The number of seconds for tag expiration
	// Minimum: 0
	TagExpirationS *int64 `json:"tag_expiration_s,omitempty"`
}

// Validate validates this update org
func (m *UpdateOrg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTagExpirationS(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateOrg) validateTagExpirationS(formats strfmt.Registry) error {

	if swag.IsZero(m.TagExpirationS) { // not required
		return nil
	}

	if err := validate.MinimumInt("tag_expiration_s", "body", int64(*m.TagExpirationS), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateOrg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateOrg) UnmarshalBinary(b []byte) error {
	var res UpdateOrg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
