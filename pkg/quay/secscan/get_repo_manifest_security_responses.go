// Code generated by go-swagger; DO NOT EDIT.

package secscan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/dlespiau/quay-exporter/pkg/models"
)

// GetRepoManifestSecurityReader is a Reader for the GetRepoManifestSecurity structure.
type GetRepoManifestSecurityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepoManifestSecurityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetRepoManifestSecurityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetRepoManifestSecurityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetRepoManifestSecurityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetRepoManifestSecurityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetRepoManifestSecurityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRepoManifestSecurityOK creates a GetRepoManifestSecurityOK with default headers values
func NewGetRepoManifestSecurityOK() *GetRepoManifestSecurityOK {
	return &GetRepoManifestSecurityOK{}
}

/*GetRepoManifestSecurityOK handles this case with default header values.

Successful invocation
*/
type GetRepoManifestSecurityOK struct {
}

func (o *GetRepoManifestSecurityOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/manifest/{manifestref}/security][%d] getRepoManifestSecurityOK ", 200)
}

func (o *GetRepoManifestSecurityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepoManifestSecurityBadRequest creates a GetRepoManifestSecurityBadRequest with default headers values
func NewGetRepoManifestSecurityBadRequest() *GetRepoManifestSecurityBadRequest {
	return &GetRepoManifestSecurityBadRequest{}
}

/*GetRepoManifestSecurityBadRequest handles this case with default header values.

Bad Request
*/
type GetRepoManifestSecurityBadRequest struct {
	Payload *models.APIError
}

func (o *GetRepoManifestSecurityBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/manifest/{manifestref}/security][%d] getRepoManifestSecurityBadRequest  %+v", 400, o.Payload)
}

func (o *GetRepoManifestSecurityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepoManifestSecurityUnauthorized creates a GetRepoManifestSecurityUnauthorized with default headers values
func NewGetRepoManifestSecurityUnauthorized() *GetRepoManifestSecurityUnauthorized {
	return &GetRepoManifestSecurityUnauthorized{}
}

/*GetRepoManifestSecurityUnauthorized handles this case with default header values.

Session required
*/
type GetRepoManifestSecurityUnauthorized struct {
	Payload *models.APIError
}

func (o *GetRepoManifestSecurityUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/manifest/{manifestref}/security][%d] getRepoManifestSecurityUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRepoManifestSecurityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepoManifestSecurityForbidden creates a GetRepoManifestSecurityForbidden with default headers values
func NewGetRepoManifestSecurityForbidden() *GetRepoManifestSecurityForbidden {
	return &GetRepoManifestSecurityForbidden{}
}

/*GetRepoManifestSecurityForbidden handles this case with default header values.

Unauthorized access
*/
type GetRepoManifestSecurityForbidden struct {
	Payload *models.APIError
}

func (o *GetRepoManifestSecurityForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/manifest/{manifestref}/security][%d] getRepoManifestSecurityForbidden  %+v", 403, o.Payload)
}

func (o *GetRepoManifestSecurityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepoManifestSecurityNotFound creates a GetRepoManifestSecurityNotFound with default headers values
func NewGetRepoManifestSecurityNotFound() *GetRepoManifestSecurityNotFound {
	return &GetRepoManifestSecurityNotFound{}
}

/*GetRepoManifestSecurityNotFound handles this case with default header values.

Not found
*/
type GetRepoManifestSecurityNotFound struct {
	Payload *models.APIError
}

func (o *GetRepoManifestSecurityNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/manifest/{manifestref}/security][%d] getRepoManifestSecurityNotFound  %+v", 404, o.Payload)
}

func (o *GetRepoManifestSecurityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
