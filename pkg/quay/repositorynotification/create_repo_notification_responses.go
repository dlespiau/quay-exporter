// Code generated by go-swagger; DO NOT EDIT.

package repositorynotification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/dlespiau/quay-exporter/pkg/models"
)

// CreateRepoNotificationReader is a Reader for the CreateRepoNotification structure.
type CreateRepoNotificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRepoNotificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateRepoNotificationCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateRepoNotificationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateRepoNotificationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateRepoNotificationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateRepoNotificationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateRepoNotificationCreated creates a CreateRepoNotificationCreated with default headers values
func NewCreateRepoNotificationCreated() *CreateRepoNotificationCreated {
	return &CreateRepoNotificationCreated{}
}

/*CreateRepoNotificationCreated handles this case with default header values.

Successful creation
*/
type CreateRepoNotificationCreated struct {
}

func (o *CreateRepoNotificationCreated) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository/{repository}/notification/][%d] createRepoNotificationCreated ", 201)
}

func (o *CreateRepoNotificationCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateRepoNotificationBadRequest creates a CreateRepoNotificationBadRequest with default headers values
func NewCreateRepoNotificationBadRequest() *CreateRepoNotificationBadRequest {
	return &CreateRepoNotificationBadRequest{}
}

/*CreateRepoNotificationBadRequest handles this case with default header values.

Bad Request
*/
type CreateRepoNotificationBadRequest struct {
	Payload *models.APIError
}

func (o *CreateRepoNotificationBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository/{repository}/notification/][%d] createRepoNotificationBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRepoNotificationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRepoNotificationUnauthorized creates a CreateRepoNotificationUnauthorized with default headers values
func NewCreateRepoNotificationUnauthorized() *CreateRepoNotificationUnauthorized {
	return &CreateRepoNotificationUnauthorized{}
}

/*CreateRepoNotificationUnauthorized handles this case with default header values.

Session required
*/
type CreateRepoNotificationUnauthorized struct {
	Payload *models.APIError
}

func (o *CreateRepoNotificationUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository/{repository}/notification/][%d] createRepoNotificationUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateRepoNotificationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRepoNotificationForbidden creates a CreateRepoNotificationForbidden with default headers values
func NewCreateRepoNotificationForbidden() *CreateRepoNotificationForbidden {
	return &CreateRepoNotificationForbidden{}
}

/*CreateRepoNotificationForbidden handles this case with default header values.

Unauthorized access
*/
type CreateRepoNotificationForbidden struct {
	Payload *models.APIError
}

func (o *CreateRepoNotificationForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository/{repository}/notification/][%d] createRepoNotificationForbidden  %+v", 403, o.Payload)
}

func (o *CreateRepoNotificationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRepoNotificationNotFound creates a CreateRepoNotificationNotFound with default headers values
func NewCreateRepoNotificationNotFound() *CreateRepoNotificationNotFound {
	return &CreateRepoNotificationNotFound{}
}

/*CreateRepoNotificationNotFound handles this case with default header values.

Not found
*/
type CreateRepoNotificationNotFound struct {
	Payload *models.APIError
}

func (o *CreateRepoNotificationNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository/{repository}/notification/][%d] createRepoNotificationNotFound  %+v", 404, o.Payload)
}

func (o *CreateRepoNotificationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
