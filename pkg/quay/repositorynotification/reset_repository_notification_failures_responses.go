// Code generated by go-swagger; DO NOT EDIT.

package repositorynotification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/dlespiau/quay-exporter/pkg/models"
)

// ResetRepositoryNotificationFailuresReader is a Reader for the ResetRepositoryNotificationFailures structure.
type ResetRepositoryNotificationFailuresReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResetRepositoryNotificationFailuresReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewResetRepositoryNotificationFailuresCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewResetRepositoryNotificationFailuresBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewResetRepositoryNotificationFailuresUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewResetRepositoryNotificationFailuresForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewResetRepositoryNotificationFailuresNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewResetRepositoryNotificationFailuresCreated creates a ResetRepositoryNotificationFailuresCreated with default headers values
func NewResetRepositoryNotificationFailuresCreated() *ResetRepositoryNotificationFailuresCreated {
	return &ResetRepositoryNotificationFailuresCreated{}
}

/*ResetRepositoryNotificationFailuresCreated handles this case with default header values.

Successful creation
*/
type ResetRepositoryNotificationFailuresCreated struct {
}

func (o *ResetRepositoryNotificationFailuresCreated) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository/{repository}/notification/{uuid}][%d] resetRepositoryNotificationFailuresCreated ", 201)
}

func (o *ResetRepositoryNotificationFailuresCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewResetRepositoryNotificationFailuresBadRequest creates a ResetRepositoryNotificationFailuresBadRequest with default headers values
func NewResetRepositoryNotificationFailuresBadRequest() *ResetRepositoryNotificationFailuresBadRequest {
	return &ResetRepositoryNotificationFailuresBadRequest{}
}

/*ResetRepositoryNotificationFailuresBadRequest handles this case with default header values.

Bad Request
*/
type ResetRepositoryNotificationFailuresBadRequest struct {
	Payload *models.APIError
}

func (o *ResetRepositoryNotificationFailuresBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository/{repository}/notification/{uuid}][%d] resetRepositoryNotificationFailuresBadRequest  %+v", 400, o.Payload)
}

func (o *ResetRepositoryNotificationFailuresBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetRepositoryNotificationFailuresUnauthorized creates a ResetRepositoryNotificationFailuresUnauthorized with default headers values
func NewResetRepositoryNotificationFailuresUnauthorized() *ResetRepositoryNotificationFailuresUnauthorized {
	return &ResetRepositoryNotificationFailuresUnauthorized{}
}

/*ResetRepositoryNotificationFailuresUnauthorized handles this case with default header values.

Session required
*/
type ResetRepositoryNotificationFailuresUnauthorized struct {
	Payload *models.APIError
}

func (o *ResetRepositoryNotificationFailuresUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository/{repository}/notification/{uuid}][%d] resetRepositoryNotificationFailuresUnauthorized  %+v", 401, o.Payload)
}

func (o *ResetRepositoryNotificationFailuresUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetRepositoryNotificationFailuresForbidden creates a ResetRepositoryNotificationFailuresForbidden with default headers values
func NewResetRepositoryNotificationFailuresForbidden() *ResetRepositoryNotificationFailuresForbidden {
	return &ResetRepositoryNotificationFailuresForbidden{}
}

/*ResetRepositoryNotificationFailuresForbidden handles this case with default header values.

Unauthorized access
*/
type ResetRepositoryNotificationFailuresForbidden struct {
	Payload *models.APIError
}

func (o *ResetRepositoryNotificationFailuresForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository/{repository}/notification/{uuid}][%d] resetRepositoryNotificationFailuresForbidden  %+v", 403, o.Payload)
}

func (o *ResetRepositoryNotificationFailuresForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetRepositoryNotificationFailuresNotFound creates a ResetRepositoryNotificationFailuresNotFound with default headers values
func NewResetRepositoryNotificationFailuresNotFound() *ResetRepositoryNotificationFailuresNotFound {
	return &ResetRepositoryNotificationFailuresNotFound{}
}

/*ResetRepositoryNotificationFailuresNotFound handles this case with default header values.

Not found
*/
type ResetRepositoryNotificationFailuresNotFound struct {
	Payload *models.APIError
}

func (o *ResetRepositoryNotificationFailuresNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository/{repository}/notification/{uuid}][%d] resetRepositoryNotificationFailuresNotFound  %+v", 404, o.Payload)
}

func (o *ResetRepositoryNotificationFailuresNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
