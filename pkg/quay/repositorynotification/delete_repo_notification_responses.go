// Code generated by go-swagger; DO NOT EDIT.

package repositorynotification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/dlespiau/quay-exporter/pkg/models"
)

// DeleteRepoNotificationReader is a Reader for the DeleteRepoNotification structure.
type DeleteRepoNotificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRepoNotificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteRepoNotificationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteRepoNotificationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDeleteRepoNotificationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteRepoNotificationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteRepoNotificationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteRepoNotificationNoContent creates a DeleteRepoNotificationNoContent with default headers values
func NewDeleteRepoNotificationNoContent() *DeleteRepoNotificationNoContent {
	return &DeleteRepoNotificationNoContent{}
}

/*DeleteRepoNotificationNoContent handles this case with default header values.

Deleted
*/
type DeleteRepoNotificationNoContent struct {
}

func (o *DeleteRepoNotificationNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/repository/{repository}/notification/{uuid}][%d] deleteRepoNotificationNoContent ", 204)
}

func (o *DeleteRepoNotificationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepoNotificationBadRequest creates a DeleteRepoNotificationBadRequest with default headers values
func NewDeleteRepoNotificationBadRequest() *DeleteRepoNotificationBadRequest {
	return &DeleteRepoNotificationBadRequest{}
}

/*DeleteRepoNotificationBadRequest handles this case with default header values.

Bad Request
*/
type DeleteRepoNotificationBadRequest struct {
	Payload *models.APIError
}

func (o *DeleteRepoNotificationBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/repository/{repository}/notification/{uuid}][%d] deleteRepoNotificationBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteRepoNotificationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRepoNotificationUnauthorized creates a DeleteRepoNotificationUnauthorized with default headers values
func NewDeleteRepoNotificationUnauthorized() *DeleteRepoNotificationUnauthorized {
	return &DeleteRepoNotificationUnauthorized{}
}

/*DeleteRepoNotificationUnauthorized handles this case with default header values.

Session required
*/
type DeleteRepoNotificationUnauthorized struct {
	Payload *models.APIError
}

func (o *DeleteRepoNotificationUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/repository/{repository}/notification/{uuid}][%d] deleteRepoNotificationUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRepoNotificationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRepoNotificationForbidden creates a DeleteRepoNotificationForbidden with default headers values
func NewDeleteRepoNotificationForbidden() *DeleteRepoNotificationForbidden {
	return &DeleteRepoNotificationForbidden{}
}

/*DeleteRepoNotificationForbidden handles this case with default header values.

Unauthorized access
*/
type DeleteRepoNotificationForbidden struct {
	Payload *models.APIError
}

func (o *DeleteRepoNotificationForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/repository/{repository}/notification/{uuid}][%d] deleteRepoNotificationForbidden  %+v", 403, o.Payload)
}

func (o *DeleteRepoNotificationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRepoNotificationNotFound creates a DeleteRepoNotificationNotFound with default headers values
func NewDeleteRepoNotificationNotFound() *DeleteRepoNotificationNotFound {
	return &DeleteRepoNotificationNotFound{}
}

/*DeleteRepoNotificationNotFound handles this case with default header values.

Not found
*/
type DeleteRepoNotificationNotFound struct {
	Payload *models.APIError
}

func (o *DeleteRepoNotificationNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/repository/{repository}/notification/{uuid}][%d] deleteRepoNotificationNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRepoNotificationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
