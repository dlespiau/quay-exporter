// Code generated by go-swagger; DO NOT EDIT.

package repositorynotification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteRepoNotificationParams creates a new DeleteRepoNotificationParams object
// with the default values initialized.
func NewDeleteRepoNotificationParams() *DeleteRepoNotificationParams {
	var ()
	return &DeleteRepoNotificationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteRepoNotificationParamsWithTimeout creates a new DeleteRepoNotificationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteRepoNotificationParamsWithTimeout(timeout time.Duration) *DeleteRepoNotificationParams {
	var ()
	return &DeleteRepoNotificationParams{

		timeout: timeout,
	}
}

// NewDeleteRepoNotificationParamsWithContext creates a new DeleteRepoNotificationParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteRepoNotificationParamsWithContext(ctx context.Context) *DeleteRepoNotificationParams {
	var ()
	return &DeleteRepoNotificationParams{

		Context: ctx,
	}
}

// NewDeleteRepoNotificationParamsWithHTTPClient creates a new DeleteRepoNotificationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteRepoNotificationParamsWithHTTPClient(client *http.Client) *DeleteRepoNotificationParams {
	var ()
	return &DeleteRepoNotificationParams{
		HTTPClient: client,
	}
}

/*DeleteRepoNotificationParams contains all the parameters to send to the API endpoint
for the delete repo notification operation typically these are written to a http.Request
*/
type DeleteRepoNotificationParams struct {

	/*Repository
	  The full path of the repository. e.g. namespace/name

	*/
	Repository string
	/*UUID
	  The UUID of the notification

	*/
	UUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete repo notification params
func (o *DeleteRepoNotificationParams) WithTimeout(timeout time.Duration) *DeleteRepoNotificationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete repo notification params
func (o *DeleteRepoNotificationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete repo notification params
func (o *DeleteRepoNotificationParams) WithContext(ctx context.Context) *DeleteRepoNotificationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete repo notification params
func (o *DeleteRepoNotificationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete repo notification params
func (o *DeleteRepoNotificationParams) WithHTTPClient(client *http.Client) *DeleteRepoNotificationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete repo notification params
func (o *DeleteRepoNotificationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRepository adds the repository to the delete repo notification params
func (o *DeleteRepoNotificationParams) WithRepository(repository string) *DeleteRepoNotificationParams {
	o.SetRepository(repository)
	return o
}

// SetRepository adds the repository to the delete repo notification params
func (o *DeleteRepoNotificationParams) SetRepository(repository string) {
	o.Repository = repository
}

// WithUUID adds the uuid to the delete repo notification params
func (o *DeleteRepoNotificationParams) WithUUID(uuid string) *DeleteRepoNotificationParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the delete repo notification params
func (o *DeleteRepoNotificationParams) SetUUID(uuid string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteRepoNotificationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param repository
	if err := r.SetPathParam("repository", o.Repository); err != nil {
		return err
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
