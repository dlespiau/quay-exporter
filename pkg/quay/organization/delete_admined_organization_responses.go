// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/dlespiau/quay-exporter/pkg/models"
)

// DeleteAdminedOrganizationReader is a Reader for the DeleteAdminedOrganization structure.
type DeleteAdminedOrganizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAdminedOrganizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteAdminedOrganizationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteAdminedOrganizationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDeleteAdminedOrganizationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteAdminedOrganizationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteAdminedOrganizationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteAdminedOrganizationNoContent creates a DeleteAdminedOrganizationNoContent with default headers values
func NewDeleteAdminedOrganizationNoContent() *DeleteAdminedOrganizationNoContent {
	return &DeleteAdminedOrganizationNoContent{}
}

/*DeleteAdminedOrganizationNoContent handles this case with default header values.

Deleted
*/
type DeleteAdminedOrganizationNoContent struct {
}

func (o *DeleteAdminedOrganizationNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/organization/{orgname}][%d] deleteAdminedOrganizationNoContent ", 204)
}

func (o *DeleteAdminedOrganizationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAdminedOrganizationBadRequest creates a DeleteAdminedOrganizationBadRequest with default headers values
func NewDeleteAdminedOrganizationBadRequest() *DeleteAdminedOrganizationBadRequest {
	return &DeleteAdminedOrganizationBadRequest{}
}

/*DeleteAdminedOrganizationBadRequest handles this case with default header values.

Bad Request
*/
type DeleteAdminedOrganizationBadRequest struct {
	Payload *models.APIError
}

func (o *DeleteAdminedOrganizationBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/organization/{orgname}][%d] deleteAdminedOrganizationBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteAdminedOrganizationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAdminedOrganizationUnauthorized creates a DeleteAdminedOrganizationUnauthorized with default headers values
func NewDeleteAdminedOrganizationUnauthorized() *DeleteAdminedOrganizationUnauthorized {
	return &DeleteAdminedOrganizationUnauthorized{}
}

/*DeleteAdminedOrganizationUnauthorized handles this case with default header values.

Session required
*/
type DeleteAdminedOrganizationUnauthorized struct {
	Payload *models.APIError
}

func (o *DeleteAdminedOrganizationUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/organization/{orgname}][%d] deleteAdminedOrganizationUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteAdminedOrganizationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAdminedOrganizationForbidden creates a DeleteAdminedOrganizationForbidden with default headers values
func NewDeleteAdminedOrganizationForbidden() *DeleteAdminedOrganizationForbidden {
	return &DeleteAdminedOrganizationForbidden{}
}

/*DeleteAdminedOrganizationForbidden handles this case with default header values.

Unauthorized access
*/
type DeleteAdminedOrganizationForbidden struct {
	Payload *models.APIError
}

func (o *DeleteAdminedOrganizationForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/organization/{orgname}][%d] deleteAdminedOrganizationForbidden  %+v", 403, o.Payload)
}

func (o *DeleteAdminedOrganizationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAdminedOrganizationNotFound creates a DeleteAdminedOrganizationNotFound with default headers values
func NewDeleteAdminedOrganizationNotFound() *DeleteAdminedOrganizationNotFound {
	return &DeleteAdminedOrganizationNotFound{}
}

/*DeleteAdminedOrganizationNotFound handles this case with default header values.

Not found
*/
type DeleteAdminedOrganizationNotFound struct {
	Payload *models.APIError
}

func (o *DeleteAdminedOrganizationNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/organization/{orgname}][%d] deleteAdminedOrganizationNotFound  %+v", 404, o.Payload)
}

func (o *DeleteAdminedOrganizationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
