// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListReposParams creates a new ListReposParams object
// with the default values initialized.
func NewListReposParams() *ListReposParams {
	var ()
	return &ListReposParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListReposParamsWithTimeout creates a new ListReposParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListReposParamsWithTimeout(timeout time.Duration) *ListReposParams {
	var ()
	return &ListReposParams{

		timeout: timeout,
	}
}

// NewListReposParamsWithContext creates a new ListReposParams object
// with the default values initialized, and the ability to set a context for a request
func NewListReposParamsWithContext(ctx context.Context) *ListReposParams {
	var ()
	return &ListReposParams{

		Context: ctx,
	}
}

// NewListReposParamsWithHTTPClient creates a new ListReposParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListReposParamsWithHTTPClient(client *http.Client) *ListReposParams {
	var ()
	return &ListReposParams{
		HTTPClient: client,
	}
}

/*ListReposParams contains all the parameters to send to the API endpoint
for the list repos operation typically these are written to a http.Request
*/
type ListReposParams struct {

	/*LastModified
	  Whether to include when the repository was last modified.

	*/
	LastModified *bool
	/*Namespace
	  Filters the repositories returned to this namespace

	*/
	Namespace *string
	/*NextPage
	  The page token for the next page

	*/
	NextPage *string
	/*Popularity
	  Whether to include the repository's popularity metric.

	*/
	Popularity *bool
	/*Public
	  Adds any repositories visible to the user by virtue of being public

	*/
	Public *bool
	/*RepoKind
	  The kind of repositories to return

	*/
	RepoKind *string
	/*Starred
	  Filters the repositories returned to those starred by the user

	*/
	Starred *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list repos params
func (o *ListReposParams) WithTimeout(timeout time.Duration) *ListReposParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list repos params
func (o *ListReposParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list repos params
func (o *ListReposParams) WithContext(ctx context.Context) *ListReposParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list repos params
func (o *ListReposParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list repos params
func (o *ListReposParams) WithHTTPClient(client *http.Client) *ListReposParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list repos params
func (o *ListReposParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLastModified adds the lastModified to the list repos params
func (o *ListReposParams) WithLastModified(lastModified *bool) *ListReposParams {
	o.SetLastModified(lastModified)
	return o
}

// SetLastModified adds the lastModified to the list repos params
func (o *ListReposParams) SetLastModified(lastModified *bool) {
	o.LastModified = lastModified
}

// WithNamespace adds the namespace to the list repos params
func (o *ListReposParams) WithNamespace(namespace *string) *ListReposParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the list repos params
func (o *ListReposParams) SetNamespace(namespace *string) {
	o.Namespace = namespace
}

// WithNextPage adds the nextPage to the list repos params
func (o *ListReposParams) WithNextPage(nextPage *string) *ListReposParams {
	o.SetNextPage(nextPage)
	return o
}

// SetNextPage adds the nextPage to the list repos params
func (o *ListReposParams) SetNextPage(nextPage *string) {
	o.NextPage = nextPage
}

// WithPopularity adds the popularity to the list repos params
func (o *ListReposParams) WithPopularity(popularity *bool) *ListReposParams {
	o.SetPopularity(popularity)
	return o
}

// SetPopularity adds the popularity to the list repos params
func (o *ListReposParams) SetPopularity(popularity *bool) {
	o.Popularity = popularity
}

// WithPublic adds the public to the list repos params
func (o *ListReposParams) WithPublic(public *bool) *ListReposParams {
	o.SetPublic(public)
	return o
}

// SetPublic adds the public to the list repos params
func (o *ListReposParams) SetPublic(public *bool) {
	o.Public = public
}

// WithRepoKind adds the repoKind to the list repos params
func (o *ListReposParams) WithRepoKind(repoKind *string) *ListReposParams {
	o.SetRepoKind(repoKind)
	return o
}

// SetRepoKind adds the repoKind to the list repos params
func (o *ListReposParams) SetRepoKind(repoKind *string) {
	o.RepoKind = repoKind
}

// WithStarred adds the starred to the list repos params
func (o *ListReposParams) WithStarred(starred *bool) *ListReposParams {
	o.SetStarred(starred)
	return o
}

// SetStarred adds the starred to the list repos params
func (o *ListReposParams) SetStarred(starred *bool) {
	o.Starred = starred
}

// WriteToRequest writes these params to a swagger request
func (o *ListReposParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LastModified != nil {

		// query param last_modified
		var qrLastModified bool
		if o.LastModified != nil {
			qrLastModified = *o.LastModified
		}
		qLastModified := swag.FormatBool(qrLastModified)
		if qLastModified != "" {
			if err := r.SetQueryParam("last_modified", qLastModified); err != nil {
				return err
			}
		}

	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace string
		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := qrNamespace
		if qNamespace != "" {
			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}

	}

	if o.NextPage != nil {

		// query param next_page
		var qrNextPage string
		if o.NextPage != nil {
			qrNextPage = *o.NextPage
		}
		qNextPage := qrNextPage
		if qNextPage != "" {
			if err := r.SetQueryParam("next_page", qNextPage); err != nil {
				return err
			}
		}

	}

	if o.Popularity != nil {

		// query param popularity
		var qrPopularity bool
		if o.Popularity != nil {
			qrPopularity = *o.Popularity
		}
		qPopularity := swag.FormatBool(qrPopularity)
		if qPopularity != "" {
			if err := r.SetQueryParam("popularity", qPopularity); err != nil {
				return err
			}
		}

	}

	if o.Public != nil {

		// query param public
		var qrPublic bool
		if o.Public != nil {
			qrPublic = *o.Public
		}
		qPublic := swag.FormatBool(qrPublic)
		if qPublic != "" {
			if err := r.SetQueryParam("public", qPublic); err != nil {
				return err
			}
		}

	}

	if o.RepoKind != nil {

		// query param repo_kind
		var qrRepoKind string
		if o.RepoKind != nil {
			qrRepoKind = *o.RepoKind
		}
		qRepoKind := qrRepoKind
		if qRepoKind != "" {
			if err := r.SetQueryParam("repo_kind", qRepoKind); err != nil {
				return err
			}
		}

	}

	if o.Starred != nil {

		// query param starred
		var qrStarred bool
		if o.Starred != nil {
			qrStarred = *o.Starred
		}
		qStarred := swag.FormatBool(qrStarred)
		if qStarred != "" {
			if err := r.SetQueryParam("starred", qStarred); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
