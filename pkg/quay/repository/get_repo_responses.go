// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/dlespiau/quay-exporter/pkg/models"
)

// GetRepoReader is a Reader for the GetRepo structure.
type GetRepoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetRepoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetRepoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetRepoUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetRepoForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetRepoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRepoOK creates a GetRepoOK with default headers values
func NewGetRepoOK() *GetRepoOK {
	return &GetRepoOK{}
}

/*GetRepoOK handles this case with default header values.

Successful invocation
*/
type GetRepoOK struct {
}

func (o *GetRepoOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}][%d] getRepoOK ", 200)
}

func (o *GetRepoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepoBadRequest creates a GetRepoBadRequest with default headers values
func NewGetRepoBadRequest() *GetRepoBadRequest {
	return &GetRepoBadRequest{}
}

/*GetRepoBadRequest handles this case with default header values.

Bad Request
*/
type GetRepoBadRequest struct {
	Payload *models.APIError
}

func (o *GetRepoBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}][%d] getRepoBadRequest  %+v", 400, o.Payload)
}

func (o *GetRepoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepoUnauthorized creates a GetRepoUnauthorized with default headers values
func NewGetRepoUnauthorized() *GetRepoUnauthorized {
	return &GetRepoUnauthorized{}
}

/*GetRepoUnauthorized handles this case with default header values.

Session required
*/
type GetRepoUnauthorized struct {
	Payload *models.APIError
}

func (o *GetRepoUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}][%d] getRepoUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRepoUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepoForbidden creates a GetRepoForbidden with default headers values
func NewGetRepoForbidden() *GetRepoForbidden {
	return &GetRepoForbidden{}
}

/*GetRepoForbidden handles this case with default header values.

Unauthorized access
*/
type GetRepoForbidden struct {
	Payload *models.APIError
}

func (o *GetRepoForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}][%d] getRepoForbidden  %+v", 403, o.Payload)
}

func (o *GetRepoForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepoNotFound creates a GetRepoNotFound with default headers values
func NewGetRepoNotFound() *GetRepoNotFound {
	return &GetRepoNotFound{}
}

/*GetRepoNotFound handles this case with default header values.

Not found
*/
type GetRepoNotFound struct {
	Payload *models.APIError
}

func (o *GetRepoNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}][%d] getRepoNotFound  %+v", 404, o.Payload)
}

func (o *GetRepoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
