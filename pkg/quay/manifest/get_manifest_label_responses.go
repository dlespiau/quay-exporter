// Code generated by go-swagger; DO NOT EDIT.

package manifest

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/dlespiau/quay-exporter/pkg/models"
)

// GetManifestLabelReader is a Reader for the GetManifestLabel structure.
type GetManifestLabelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetManifestLabelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetManifestLabelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetManifestLabelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetManifestLabelUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetManifestLabelForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetManifestLabelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetManifestLabelOK creates a GetManifestLabelOK with default headers values
func NewGetManifestLabelOK() *GetManifestLabelOK {
	return &GetManifestLabelOK{}
}

/*GetManifestLabelOK handles this case with default header values.

Successful invocation
*/
type GetManifestLabelOK struct {
}

func (o *GetManifestLabelOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}][%d] getManifestLabelOK ", 200)
}

func (o *GetManifestLabelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetManifestLabelBadRequest creates a GetManifestLabelBadRequest with default headers values
func NewGetManifestLabelBadRequest() *GetManifestLabelBadRequest {
	return &GetManifestLabelBadRequest{}
}

/*GetManifestLabelBadRequest handles this case with default header values.

Bad Request
*/
type GetManifestLabelBadRequest struct {
	Payload *models.APIError
}

func (o *GetManifestLabelBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}][%d] getManifestLabelBadRequest  %+v", 400, o.Payload)
}

func (o *GetManifestLabelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetManifestLabelUnauthorized creates a GetManifestLabelUnauthorized with default headers values
func NewGetManifestLabelUnauthorized() *GetManifestLabelUnauthorized {
	return &GetManifestLabelUnauthorized{}
}

/*GetManifestLabelUnauthorized handles this case with default header values.

Session required
*/
type GetManifestLabelUnauthorized struct {
	Payload *models.APIError
}

func (o *GetManifestLabelUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}][%d] getManifestLabelUnauthorized  %+v", 401, o.Payload)
}

func (o *GetManifestLabelUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetManifestLabelForbidden creates a GetManifestLabelForbidden with default headers values
func NewGetManifestLabelForbidden() *GetManifestLabelForbidden {
	return &GetManifestLabelForbidden{}
}

/*GetManifestLabelForbidden handles this case with default header values.

Unauthorized access
*/
type GetManifestLabelForbidden struct {
	Payload *models.APIError
}

func (o *GetManifestLabelForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}][%d] getManifestLabelForbidden  %+v", 403, o.Payload)
}

func (o *GetManifestLabelForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetManifestLabelNotFound creates a GetManifestLabelNotFound with default headers values
func NewGetManifestLabelNotFound() *GetManifestLabelNotFound {
	return &GetManifestLabelNotFound{}
}

/*GetManifestLabelNotFound handles this case with default header values.

Not found
*/
type GetManifestLabelNotFound struct {
	Payload *models.APIError
}

func (o *GetManifestLabelNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}][%d] getManifestLabelNotFound  %+v", 404, o.Payload)
}

func (o *GetManifestLabelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
