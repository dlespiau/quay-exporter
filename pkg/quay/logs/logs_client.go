// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new logs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for logs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAggregateOrgLogs Gets the aggregated logs for the specified organization.
*/
func (a *Client) GetAggregateOrgLogs(params *GetAggregateOrgLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAggregateOrgLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAggregateOrgLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAggregateOrgLogs",
		Method:             "GET",
		PathPattern:        "/api/v1/organization/{orgname}/aggregatelogs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAggregateOrgLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAggregateOrgLogsOK), nil

}

/*
GetAggregateRepoLogs Returns the aggregated logs for the specified repository.
*/
func (a *Client) GetAggregateRepoLogs(params *GetAggregateRepoLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAggregateRepoLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAggregateRepoLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAggregateRepoLogs",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/aggregatelogs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAggregateRepoLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAggregateRepoLogsOK), nil

}

/*
GetAggregateUserLogs Returns the aggregated logs for the current user.
*/
func (a *Client) GetAggregateUserLogs(params *GetAggregateUserLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAggregateUserLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAggregateUserLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAggregateUserLogs",
		Method:             "GET",
		PathPattern:        "/api/v1/user/aggregatelogs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAggregateUserLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAggregateUserLogsOK), nil

}

/*
ListOrgLogs List the logs for the specified organization.
*/
func (a *Client) ListOrgLogs(params *ListOrgLogsParams, authInfo runtime.ClientAuthInfoWriter) (*ListOrgLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOrgLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listOrgLogs",
		Method:             "GET",
		PathPattern:        "/api/v1/organization/{orgname}/logs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListOrgLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListOrgLogsOK), nil

}

/*
ListRepoLogs List the logs for the specified repository.
*/
func (a *Client) ListRepoLogs(params *ListRepoLogsParams, authInfo runtime.ClientAuthInfoWriter) (*ListRepoLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRepoLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRepoLogs",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/logs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRepoLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRepoLogsOK), nil

}

/*
ListUserLogs List the logs for the current user.
*/
func (a *Client) ListUserLogs(params *ListUserLogsParams, authInfo runtime.ClientAuthInfoWriter) (*ListUserLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUserLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listUserLogs",
		Method:             "GET",
		PathPattern:        "/api/v1/user/logs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListUserLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListUserLogsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
