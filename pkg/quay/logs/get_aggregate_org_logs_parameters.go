// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAggregateOrgLogsParams creates a new GetAggregateOrgLogsParams object
// with the default values initialized.
func NewGetAggregateOrgLogsParams() *GetAggregateOrgLogsParams {
	var ()
	return &GetAggregateOrgLogsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAggregateOrgLogsParamsWithTimeout creates a new GetAggregateOrgLogsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAggregateOrgLogsParamsWithTimeout(timeout time.Duration) *GetAggregateOrgLogsParams {
	var ()
	return &GetAggregateOrgLogsParams{

		timeout: timeout,
	}
}

// NewGetAggregateOrgLogsParamsWithContext creates a new GetAggregateOrgLogsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAggregateOrgLogsParamsWithContext(ctx context.Context) *GetAggregateOrgLogsParams {
	var ()
	return &GetAggregateOrgLogsParams{

		Context: ctx,
	}
}

// NewGetAggregateOrgLogsParamsWithHTTPClient creates a new GetAggregateOrgLogsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAggregateOrgLogsParamsWithHTTPClient(client *http.Client) *GetAggregateOrgLogsParams {
	var ()
	return &GetAggregateOrgLogsParams{
		HTTPClient: client,
	}
}

/*GetAggregateOrgLogsParams contains all the parameters to send to the API endpoint
for the get aggregate org logs operation typically these are written to a http.Request
*/
type GetAggregateOrgLogsParams struct {

	/*Endtime
	  Latest time to which to get logs. (%m/%d/%Y %Z)

	*/
	Endtime *string
	/*Orgname
	  The name of the organization

	*/
	Orgname string
	/*Performer
	  Username for which to filter logs.

	*/
	Performer *string
	/*Starttime
	  Earliest time from which to get logs. (%m/%d/%Y %Z)

	*/
	Starttime *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get aggregate org logs params
func (o *GetAggregateOrgLogsParams) WithTimeout(timeout time.Duration) *GetAggregateOrgLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get aggregate org logs params
func (o *GetAggregateOrgLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get aggregate org logs params
func (o *GetAggregateOrgLogsParams) WithContext(ctx context.Context) *GetAggregateOrgLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get aggregate org logs params
func (o *GetAggregateOrgLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get aggregate org logs params
func (o *GetAggregateOrgLogsParams) WithHTTPClient(client *http.Client) *GetAggregateOrgLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get aggregate org logs params
func (o *GetAggregateOrgLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndtime adds the endtime to the get aggregate org logs params
func (o *GetAggregateOrgLogsParams) WithEndtime(endtime *string) *GetAggregateOrgLogsParams {
	o.SetEndtime(endtime)
	return o
}

// SetEndtime adds the endtime to the get aggregate org logs params
func (o *GetAggregateOrgLogsParams) SetEndtime(endtime *string) {
	o.Endtime = endtime
}

// WithOrgname adds the orgname to the get aggregate org logs params
func (o *GetAggregateOrgLogsParams) WithOrgname(orgname string) *GetAggregateOrgLogsParams {
	o.SetOrgname(orgname)
	return o
}

// SetOrgname adds the orgname to the get aggregate org logs params
func (o *GetAggregateOrgLogsParams) SetOrgname(orgname string) {
	o.Orgname = orgname
}

// WithPerformer adds the performer to the get aggregate org logs params
func (o *GetAggregateOrgLogsParams) WithPerformer(performer *string) *GetAggregateOrgLogsParams {
	o.SetPerformer(performer)
	return o
}

// SetPerformer adds the performer to the get aggregate org logs params
func (o *GetAggregateOrgLogsParams) SetPerformer(performer *string) {
	o.Performer = performer
}

// WithStarttime adds the starttime to the get aggregate org logs params
func (o *GetAggregateOrgLogsParams) WithStarttime(starttime *string) *GetAggregateOrgLogsParams {
	o.SetStarttime(starttime)
	return o
}

// SetStarttime adds the starttime to the get aggregate org logs params
func (o *GetAggregateOrgLogsParams) SetStarttime(starttime *string) {
	o.Starttime = starttime
}

// WriteToRequest writes these params to a swagger request
func (o *GetAggregateOrgLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Endtime != nil {

		// query param endtime
		var qrEndtime string
		if o.Endtime != nil {
			qrEndtime = *o.Endtime
		}
		qEndtime := qrEndtime
		if qEndtime != "" {
			if err := r.SetQueryParam("endtime", qEndtime); err != nil {
				return err
			}
		}

	}

	// path param orgname
	if err := r.SetPathParam("orgname", o.Orgname); err != nil {
		return err
	}

	if o.Performer != nil {

		// query param performer
		var qrPerformer string
		if o.Performer != nil {
			qrPerformer = *o.Performer
		}
		qPerformer := qrPerformer
		if qPerformer != "" {
			if err := r.SetQueryParam("performer", qPerformer); err != nil {
				return err
			}
		}

	}

	if o.Starttime != nil {

		// query param starttime
		var qrStarttime string
		if o.Starttime != nil {
			qrStarttime = *o.Starttime
		}
		qStarttime := qrStarttime
		if qStarttime != "" {
			if err := r.SetQueryParam("starttime", qStarttime); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
