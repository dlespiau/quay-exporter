// Code generated by go-swagger; DO NOT EDIT.

package robot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetUserRobotPermissionsParams creates a new GetUserRobotPermissionsParams object
// with the default values initialized.
func NewGetUserRobotPermissionsParams() *GetUserRobotPermissionsParams {
	var ()
	return &GetUserRobotPermissionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUserRobotPermissionsParamsWithTimeout creates a new GetUserRobotPermissionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUserRobotPermissionsParamsWithTimeout(timeout time.Duration) *GetUserRobotPermissionsParams {
	var ()
	return &GetUserRobotPermissionsParams{

		timeout: timeout,
	}
}

// NewGetUserRobotPermissionsParamsWithContext creates a new GetUserRobotPermissionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUserRobotPermissionsParamsWithContext(ctx context.Context) *GetUserRobotPermissionsParams {
	var ()
	return &GetUserRobotPermissionsParams{

		Context: ctx,
	}
}

// NewGetUserRobotPermissionsParamsWithHTTPClient creates a new GetUserRobotPermissionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUserRobotPermissionsParamsWithHTTPClient(client *http.Client) *GetUserRobotPermissionsParams {
	var ()
	return &GetUserRobotPermissionsParams{
		HTTPClient: client,
	}
}

/*GetUserRobotPermissionsParams contains all the parameters to send to the API endpoint
for the get user robot permissions operation typically these are written to a http.Request
*/
type GetUserRobotPermissionsParams struct {

	/*RobotShortname
	  The short name for the robot, without any user or organization prefix

	*/
	RobotShortname string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get user robot permissions params
func (o *GetUserRobotPermissionsParams) WithTimeout(timeout time.Duration) *GetUserRobotPermissionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get user robot permissions params
func (o *GetUserRobotPermissionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get user robot permissions params
func (o *GetUserRobotPermissionsParams) WithContext(ctx context.Context) *GetUserRobotPermissionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get user robot permissions params
func (o *GetUserRobotPermissionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get user robot permissions params
func (o *GetUserRobotPermissionsParams) WithHTTPClient(client *http.Client) *GetUserRobotPermissionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get user robot permissions params
func (o *GetUserRobotPermissionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRobotShortname adds the robotShortname to the get user robot permissions params
func (o *GetUserRobotPermissionsParams) WithRobotShortname(robotShortname string) *GetUserRobotPermissionsParams {
	o.SetRobotShortname(robotShortname)
	return o
}

// SetRobotShortname adds the robotShortname to the get user robot permissions params
func (o *GetUserRobotPermissionsParams) SetRobotShortname(robotShortname string) {
	o.RobotShortname = robotShortname
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserRobotPermissionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param robot_shortname
	if err := r.SetPathParam("robot_shortname", o.RobotShortname); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
