// Code generated by go-swagger; DO NOT EDIT.

package robot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRegenerateUserRobotTokenParams creates a new RegenerateUserRobotTokenParams object
// with the default values initialized.
func NewRegenerateUserRobotTokenParams() *RegenerateUserRobotTokenParams {
	var ()
	return &RegenerateUserRobotTokenParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRegenerateUserRobotTokenParamsWithTimeout creates a new RegenerateUserRobotTokenParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRegenerateUserRobotTokenParamsWithTimeout(timeout time.Duration) *RegenerateUserRobotTokenParams {
	var ()
	return &RegenerateUserRobotTokenParams{

		timeout: timeout,
	}
}

// NewRegenerateUserRobotTokenParamsWithContext creates a new RegenerateUserRobotTokenParams object
// with the default values initialized, and the ability to set a context for a request
func NewRegenerateUserRobotTokenParamsWithContext(ctx context.Context) *RegenerateUserRobotTokenParams {
	var ()
	return &RegenerateUserRobotTokenParams{

		Context: ctx,
	}
}

// NewRegenerateUserRobotTokenParamsWithHTTPClient creates a new RegenerateUserRobotTokenParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRegenerateUserRobotTokenParamsWithHTTPClient(client *http.Client) *RegenerateUserRobotTokenParams {
	var ()
	return &RegenerateUserRobotTokenParams{
		HTTPClient: client,
	}
}

/*RegenerateUserRobotTokenParams contains all the parameters to send to the API endpoint
for the regenerate user robot token operation typically these are written to a http.Request
*/
type RegenerateUserRobotTokenParams struct {

	/*RobotShortname
	  The short name for the robot, without any user or organization prefix

	*/
	RobotShortname string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the regenerate user robot token params
func (o *RegenerateUserRobotTokenParams) WithTimeout(timeout time.Duration) *RegenerateUserRobotTokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the regenerate user robot token params
func (o *RegenerateUserRobotTokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the regenerate user robot token params
func (o *RegenerateUserRobotTokenParams) WithContext(ctx context.Context) *RegenerateUserRobotTokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the regenerate user robot token params
func (o *RegenerateUserRobotTokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the regenerate user robot token params
func (o *RegenerateUserRobotTokenParams) WithHTTPClient(client *http.Client) *RegenerateUserRobotTokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the regenerate user robot token params
func (o *RegenerateUserRobotTokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRobotShortname adds the robotShortname to the regenerate user robot token params
func (o *RegenerateUserRobotTokenParams) WithRobotShortname(robotShortname string) *RegenerateUserRobotTokenParams {
	o.SetRobotShortname(robotShortname)
	return o
}

// SetRobotShortname adds the robotShortname to the regenerate user robot token params
func (o *RegenerateUserRobotTokenParams) SetRobotShortname(robotShortname string) {
	o.RobotShortname = robotShortname
}

// WriteToRequest writes these params to a swagger request
func (o *RegenerateUserRobotTokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param robot_shortname
	if err := r.SetPathParam("robot_shortname", o.RobotShortname); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
