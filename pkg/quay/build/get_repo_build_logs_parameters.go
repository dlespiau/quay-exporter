// Code generated by go-swagger; DO NOT EDIT.

package build

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRepoBuildLogsParams creates a new GetRepoBuildLogsParams object
// with the default values initialized.
func NewGetRepoBuildLogsParams() *GetRepoBuildLogsParams {
	var ()
	return &GetRepoBuildLogsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRepoBuildLogsParamsWithTimeout creates a new GetRepoBuildLogsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRepoBuildLogsParamsWithTimeout(timeout time.Duration) *GetRepoBuildLogsParams {
	var ()
	return &GetRepoBuildLogsParams{

		timeout: timeout,
	}
}

// NewGetRepoBuildLogsParamsWithContext creates a new GetRepoBuildLogsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRepoBuildLogsParamsWithContext(ctx context.Context) *GetRepoBuildLogsParams {
	var ()
	return &GetRepoBuildLogsParams{

		Context: ctx,
	}
}

// NewGetRepoBuildLogsParamsWithHTTPClient creates a new GetRepoBuildLogsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRepoBuildLogsParamsWithHTTPClient(client *http.Client) *GetRepoBuildLogsParams {
	var ()
	return &GetRepoBuildLogsParams{
		HTTPClient: client,
	}
}

/*GetRepoBuildLogsParams contains all the parameters to send to the API endpoint
for the get repo build logs operation typically these are written to a http.Request
*/
type GetRepoBuildLogsParams struct {

	/*BuildUUID
	  The UUID of the build

	*/
	BuildUUID string
	/*Repository
	  The full path of the repository. e.g. namespace/name

	*/
	Repository string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get repo build logs params
func (o *GetRepoBuildLogsParams) WithTimeout(timeout time.Duration) *GetRepoBuildLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get repo build logs params
func (o *GetRepoBuildLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get repo build logs params
func (o *GetRepoBuildLogsParams) WithContext(ctx context.Context) *GetRepoBuildLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get repo build logs params
func (o *GetRepoBuildLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get repo build logs params
func (o *GetRepoBuildLogsParams) WithHTTPClient(client *http.Client) *GetRepoBuildLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get repo build logs params
func (o *GetRepoBuildLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBuildUUID adds the buildUUID to the get repo build logs params
func (o *GetRepoBuildLogsParams) WithBuildUUID(buildUUID string) *GetRepoBuildLogsParams {
	o.SetBuildUUID(buildUUID)
	return o
}

// SetBuildUUID adds the buildUuid to the get repo build logs params
func (o *GetRepoBuildLogsParams) SetBuildUUID(buildUUID string) {
	o.BuildUUID = buildUUID
}

// WithRepository adds the repository to the get repo build logs params
func (o *GetRepoBuildLogsParams) WithRepository(repository string) *GetRepoBuildLogsParams {
	o.SetRepository(repository)
	return o
}

// SetRepository adds the repository to the get repo build logs params
func (o *GetRepoBuildLogsParams) SetRepository(repository string) {
	o.Repository = repository
}

// WriteToRequest writes these params to a swagger request
func (o *GetRepoBuildLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param build_uuid
	if err := r.SetPathParam("build_uuid", o.BuildUUID); err != nil {
		return err
	}

	// path param repository
	if err := r.SetPathParam("repository", o.Repository); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
