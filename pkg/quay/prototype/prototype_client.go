// Code generated by go-swagger; DO NOT EDIT.

package prototype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new prototype API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for prototype API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateOrganizationPrototypePermission Create a new permission prototype.
*/
func (a *Client) CreateOrganizationPrototypePermission(params *CreateOrganizationPrototypePermissionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganizationPrototypePermissionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationPrototypePermissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrganizationPrototypePermission",
		Method:             "POST",
		PathPattern:        "/api/v1/organization/{orgname}/prototypes",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationPrototypePermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateOrganizationPrototypePermissionCreated), nil

}

/*
DeleteOrganizationPrototypePermission Delete an existing permission prototype.
*/
func (a *Client) DeleteOrganizationPrototypePermission(params *DeleteOrganizationPrototypePermissionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrganizationPrototypePermissionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationPrototypePermissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrganizationPrototypePermission",
		Method:             "DELETE",
		PathPattern:        "/api/v1/organization/{orgname}/prototypes/{prototypeid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationPrototypePermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrganizationPrototypePermissionNoContent), nil

}

/*
GetOrganizationPrototypePermissions List the existing prototypes for this organization.
*/
func (a *Client) GetOrganizationPrototypePermissions(params *GetOrganizationPrototypePermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationPrototypePermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationPrototypePermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationPrototypePermissions",
		Method:             "GET",
		PathPattern:        "/api/v1/organization/{orgname}/prototypes",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationPrototypePermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationPrototypePermissionsOK), nil

}

/*
UpdateOrganizationPrototypePermission Update the role of an existing permission prototype.
*/
func (a *Client) UpdateOrganizationPrototypePermission(params *UpdateOrganizationPrototypePermissionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationPrototypePermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationPrototypePermissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOrganizationPrototypePermission",
		Method:             "PUT",
		PathPattern:        "/api/v1/organization/{orgname}/prototypes/{prototypeid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationPrototypePermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateOrganizationPrototypePermissionOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
