// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/dlespiau/quay-exporter/pkg/models"
)

// ConductRepoSearchReader is a Reader for the ConductRepoSearch structure.
type ConductRepoSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConductRepoSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewConductRepoSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewConductRepoSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewConductRepoSearchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewConductRepoSearchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewConductRepoSearchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewConductRepoSearchOK creates a ConductRepoSearchOK with default headers values
func NewConductRepoSearchOK() *ConductRepoSearchOK {
	return &ConductRepoSearchOK{}
}

/*ConductRepoSearchOK handles this case with default header values.

Successful invocation
*/
type ConductRepoSearchOK struct {
}

func (o *ConductRepoSearchOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/find/repositories][%d] conductRepoSearchOK ", 200)
}

func (o *ConductRepoSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewConductRepoSearchBadRequest creates a ConductRepoSearchBadRequest with default headers values
func NewConductRepoSearchBadRequest() *ConductRepoSearchBadRequest {
	return &ConductRepoSearchBadRequest{}
}

/*ConductRepoSearchBadRequest handles this case with default header values.

Bad Request
*/
type ConductRepoSearchBadRequest struct {
	Payload *models.APIError
}

func (o *ConductRepoSearchBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/find/repositories][%d] conductRepoSearchBadRequest  %+v", 400, o.Payload)
}

func (o *ConductRepoSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConductRepoSearchUnauthorized creates a ConductRepoSearchUnauthorized with default headers values
func NewConductRepoSearchUnauthorized() *ConductRepoSearchUnauthorized {
	return &ConductRepoSearchUnauthorized{}
}

/*ConductRepoSearchUnauthorized handles this case with default header values.

Session required
*/
type ConductRepoSearchUnauthorized struct {
	Payload *models.APIError
}

func (o *ConductRepoSearchUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/find/repositories][%d] conductRepoSearchUnauthorized  %+v", 401, o.Payload)
}

func (o *ConductRepoSearchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConductRepoSearchForbidden creates a ConductRepoSearchForbidden with default headers values
func NewConductRepoSearchForbidden() *ConductRepoSearchForbidden {
	return &ConductRepoSearchForbidden{}
}

/*ConductRepoSearchForbidden handles this case with default header values.

Unauthorized access
*/
type ConductRepoSearchForbidden struct {
	Payload *models.APIError
}

func (o *ConductRepoSearchForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/find/repositories][%d] conductRepoSearchForbidden  %+v", 403, o.Payload)
}

func (o *ConductRepoSearchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConductRepoSearchNotFound creates a ConductRepoSearchNotFound with default headers values
func NewConductRepoSearchNotFound() *ConductRepoSearchNotFound {
	return &ConductRepoSearchNotFound{}
}

/*ConductRepoSearchNotFound handles this case with default header values.

Not found
*/
type ConductRepoSearchNotFound struct {
	Payload *models.APIError
}

func (o *ConductRepoSearchNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/find/repositories][%d] conductRepoSearchNotFound  %+v", 404, o.Payload)
}

func (o *ConductRepoSearchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
