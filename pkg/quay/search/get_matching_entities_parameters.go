// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetMatchingEntitiesParams creates a new GetMatchingEntitiesParams object
// with the default values initialized.
func NewGetMatchingEntitiesParams() *GetMatchingEntitiesParams {
	var ()
	return &GetMatchingEntitiesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetMatchingEntitiesParamsWithTimeout creates a new GetMatchingEntitiesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetMatchingEntitiesParamsWithTimeout(timeout time.Duration) *GetMatchingEntitiesParams {
	var ()
	return &GetMatchingEntitiesParams{

		timeout: timeout,
	}
}

// NewGetMatchingEntitiesParamsWithContext creates a new GetMatchingEntitiesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetMatchingEntitiesParamsWithContext(ctx context.Context) *GetMatchingEntitiesParams {
	var ()
	return &GetMatchingEntitiesParams{

		Context: ctx,
	}
}

// NewGetMatchingEntitiesParamsWithHTTPClient creates a new GetMatchingEntitiesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetMatchingEntitiesParamsWithHTTPClient(client *http.Client) *GetMatchingEntitiesParams {
	var ()
	return &GetMatchingEntitiesParams{
		HTTPClient: client,
	}
}

/*GetMatchingEntitiesParams contains all the parameters to send to the API endpoint
for the get matching entities operation typically these are written to a http.Request
*/
type GetMatchingEntitiesParams struct {

	/*IncludeOrgs
	  Whether to include orgs names.

	*/
	IncludeOrgs *bool
	/*IncludeTeams
	  Whether to include team names.

	*/
	IncludeTeams *bool
	/*Namespace
	  Namespace to use when querying for org entities.

	*/
	Namespace *string
	/*Prefix*/
	Prefix string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get matching entities params
func (o *GetMatchingEntitiesParams) WithTimeout(timeout time.Duration) *GetMatchingEntitiesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get matching entities params
func (o *GetMatchingEntitiesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get matching entities params
func (o *GetMatchingEntitiesParams) WithContext(ctx context.Context) *GetMatchingEntitiesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get matching entities params
func (o *GetMatchingEntitiesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get matching entities params
func (o *GetMatchingEntitiesParams) WithHTTPClient(client *http.Client) *GetMatchingEntitiesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get matching entities params
func (o *GetMatchingEntitiesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeOrgs adds the includeOrgs to the get matching entities params
func (o *GetMatchingEntitiesParams) WithIncludeOrgs(includeOrgs *bool) *GetMatchingEntitiesParams {
	o.SetIncludeOrgs(includeOrgs)
	return o
}

// SetIncludeOrgs adds the includeOrgs to the get matching entities params
func (o *GetMatchingEntitiesParams) SetIncludeOrgs(includeOrgs *bool) {
	o.IncludeOrgs = includeOrgs
}

// WithIncludeTeams adds the includeTeams to the get matching entities params
func (o *GetMatchingEntitiesParams) WithIncludeTeams(includeTeams *bool) *GetMatchingEntitiesParams {
	o.SetIncludeTeams(includeTeams)
	return o
}

// SetIncludeTeams adds the includeTeams to the get matching entities params
func (o *GetMatchingEntitiesParams) SetIncludeTeams(includeTeams *bool) {
	o.IncludeTeams = includeTeams
}

// WithNamespace adds the namespace to the get matching entities params
func (o *GetMatchingEntitiesParams) WithNamespace(namespace *string) *GetMatchingEntitiesParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get matching entities params
func (o *GetMatchingEntitiesParams) SetNamespace(namespace *string) {
	o.Namespace = namespace
}

// WithPrefix adds the prefix to the get matching entities params
func (o *GetMatchingEntitiesParams) WithPrefix(prefix string) *GetMatchingEntitiesParams {
	o.SetPrefix(prefix)
	return o
}

// SetPrefix adds the prefix to the get matching entities params
func (o *GetMatchingEntitiesParams) SetPrefix(prefix string) {
	o.Prefix = prefix
}

// WriteToRequest writes these params to a swagger request
func (o *GetMatchingEntitiesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeOrgs != nil {

		// query param includeOrgs
		var qrIncludeOrgs bool
		if o.IncludeOrgs != nil {
			qrIncludeOrgs = *o.IncludeOrgs
		}
		qIncludeOrgs := swag.FormatBool(qrIncludeOrgs)
		if qIncludeOrgs != "" {
			if err := r.SetQueryParam("includeOrgs", qIncludeOrgs); err != nil {
				return err
			}
		}

	}

	if o.IncludeTeams != nil {

		// query param includeTeams
		var qrIncludeTeams bool
		if o.IncludeTeams != nil {
			qrIncludeTeams = *o.IncludeTeams
		}
		qIncludeTeams := swag.FormatBool(qrIncludeTeams)
		if qIncludeTeams != "" {
			if err := r.SetQueryParam("includeTeams", qIncludeTeams); err != nil {
				return err
			}
		}

	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace string
		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := qrNamespace
		if qNamespace != "" {
			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}

	}

	// path param prefix
	if err := r.SetPathParam("prefix", o.Prefix); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
