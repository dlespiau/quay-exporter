// Code generated by go-swagger; DO NOT EDIT.

package permission

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/dlespiau/quay-exporter/pkg/models"
)

// DeleteTeamPermissionsReader is a Reader for the DeleteTeamPermissions structure.
type DeleteTeamPermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTeamPermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteTeamPermissionsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteTeamPermissionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDeleteTeamPermissionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteTeamPermissionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteTeamPermissionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteTeamPermissionsNoContent creates a DeleteTeamPermissionsNoContent with default headers values
func NewDeleteTeamPermissionsNoContent() *DeleteTeamPermissionsNoContent {
	return &DeleteTeamPermissionsNoContent{}
}

/*DeleteTeamPermissionsNoContent handles this case with default header values.

Deleted
*/
type DeleteTeamPermissionsNoContent struct {
}

func (o *DeleteTeamPermissionsNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/repository/{repository}/permissions/team/{teamname}][%d] deleteTeamPermissionsNoContent ", 204)
}

func (o *DeleteTeamPermissionsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTeamPermissionsBadRequest creates a DeleteTeamPermissionsBadRequest with default headers values
func NewDeleteTeamPermissionsBadRequest() *DeleteTeamPermissionsBadRequest {
	return &DeleteTeamPermissionsBadRequest{}
}

/*DeleteTeamPermissionsBadRequest handles this case with default header values.

Bad Request
*/
type DeleteTeamPermissionsBadRequest struct {
	Payload *models.APIError
}

func (o *DeleteTeamPermissionsBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/repository/{repository}/permissions/team/{teamname}][%d] deleteTeamPermissionsBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteTeamPermissionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamPermissionsUnauthorized creates a DeleteTeamPermissionsUnauthorized with default headers values
func NewDeleteTeamPermissionsUnauthorized() *DeleteTeamPermissionsUnauthorized {
	return &DeleteTeamPermissionsUnauthorized{}
}

/*DeleteTeamPermissionsUnauthorized handles this case with default header values.

Session required
*/
type DeleteTeamPermissionsUnauthorized struct {
	Payload *models.APIError
}

func (o *DeleteTeamPermissionsUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/repository/{repository}/permissions/team/{teamname}][%d] deleteTeamPermissionsUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteTeamPermissionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamPermissionsForbidden creates a DeleteTeamPermissionsForbidden with default headers values
func NewDeleteTeamPermissionsForbidden() *DeleteTeamPermissionsForbidden {
	return &DeleteTeamPermissionsForbidden{}
}

/*DeleteTeamPermissionsForbidden handles this case with default header values.

Unauthorized access
*/
type DeleteTeamPermissionsForbidden struct {
	Payload *models.APIError
}

func (o *DeleteTeamPermissionsForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/repository/{repository}/permissions/team/{teamname}][%d] deleteTeamPermissionsForbidden  %+v", 403, o.Payload)
}

func (o *DeleteTeamPermissionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamPermissionsNotFound creates a DeleteTeamPermissionsNotFound with default headers values
func NewDeleteTeamPermissionsNotFound() *DeleteTeamPermissionsNotFound {
	return &DeleteTeamPermissionsNotFound{}
}

/*DeleteTeamPermissionsNotFound handles this case with default header values.

Not found
*/
type DeleteTeamPermissionsNotFound struct {
	Payload *models.APIError
}

func (o *DeleteTeamPermissionsNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/repository/{repository}/permissions/team/{teamname}][%d] deleteTeamPermissionsNotFound  %+v", 404, o.Payload)
}

func (o *DeleteTeamPermissionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
