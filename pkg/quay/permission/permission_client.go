// Code generated by go-swagger; DO NOT EDIT.

package permission

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new permission API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for permission API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChangeTeamPermissions Update the existing team permission.
*/
func (a *Client) ChangeTeamPermissions(params *ChangeTeamPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeTeamPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeTeamPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeTeamPermissions",
		Method:             "PUT",
		PathPattern:        "/api/v1/repository/{repository}/permissions/team/{teamname}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeTeamPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeTeamPermissionsOK), nil

}

/*
ChangeUserPermissions Update the perimssions for an existing repository.
*/
func (a *Client) ChangeUserPermissions(params *ChangeUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeUserPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeUserPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeUserPermissions",
		Method:             "PUT",
		PathPattern:        "/api/v1/repository/{repository}/permissions/user/{username}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeUserPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeUserPermissionsOK), nil

}

/*
DeleteTeamPermissions Delete the permission for the specified team.
*/
func (a *Client) DeleteTeamPermissions(params *DeleteTeamPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTeamPermissionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTeamPermissions",
		Method:             "DELETE",
		PathPattern:        "/api/v1/repository/{repository}/permissions/team/{teamname}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTeamPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTeamPermissionsNoContent), nil

}

/*
DeleteUserPermissions Delete the permission for the user.
*/
func (a *Client) DeleteUserPermissions(params *DeleteUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserPermissionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserPermissions",
		Method:             "DELETE",
		PathPattern:        "/api/v1/repository/{repository}/permissions/user/{username}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserPermissionsNoContent), nil

}

/*
GetTeamPermissions Fetch the permission for the specified team.
*/
func (a *Client) GetTeamPermissions(params *GetTeamPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTeamPermissions",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/permissions/team/{teamname}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTeamPermissionsOK), nil

}

/*
GetUserPermissions Get the permission for the specified user.
*/
func (a *Client) GetUserPermissions(params *GetUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserPermissions",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/permissions/user/{username}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserPermissionsOK), nil

}

/*
GetUserTransitivePermission Get the fetch the permission for the specified user.
*/
func (a *Client) GetUserTransitivePermission(params *GetUserTransitivePermissionParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserTransitivePermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserTransitivePermissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserTransitivePermission",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/permissions/user/{username}/transitive",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserTransitivePermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserTransitivePermissionOK), nil

}

/*
ListRepoTeamPermissions List all team permission.
*/
func (a *Client) ListRepoTeamPermissions(params *ListRepoTeamPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*ListRepoTeamPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRepoTeamPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRepoTeamPermissions",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/permissions/team/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRepoTeamPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRepoTeamPermissionsOK), nil

}

/*
ListRepoUserPermissions List all user permissions.
*/
func (a *Client) ListRepoUserPermissions(params *ListRepoUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*ListRepoUserPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRepoUserPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRepoUserPermissions",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/permissions/user/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRepoUserPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRepoUserPermissionsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
