// Code generated by go-swagger; DO NOT EDIT.

package permission

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/dlespiau/quay-exporter/pkg/models"
)

// GetUserTransitivePermissionReader is a Reader for the GetUserTransitivePermission structure.
type GetUserTransitivePermissionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserTransitivePermissionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetUserTransitivePermissionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetUserTransitivePermissionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetUserTransitivePermissionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetUserTransitivePermissionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetUserTransitivePermissionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetUserTransitivePermissionOK creates a GetUserTransitivePermissionOK with default headers values
func NewGetUserTransitivePermissionOK() *GetUserTransitivePermissionOK {
	return &GetUserTransitivePermissionOK{}
}

/*GetUserTransitivePermissionOK handles this case with default header values.

Successful invocation
*/
type GetUserTransitivePermissionOK struct {
}

func (o *GetUserTransitivePermissionOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/permissions/user/{username}/transitive][%d] getUserTransitivePermissionOK ", 200)
}

func (o *GetUserTransitivePermissionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserTransitivePermissionBadRequest creates a GetUserTransitivePermissionBadRequest with default headers values
func NewGetUserTransitivePermissionBadRequest() *GetUserTransitivePermissionBadRequest {
	return &GetUserTransitivePermissionBadRequest{}
}

/*GetUserTransitivePermissionBadRequest handles this case with default header values.

Bad Request
*/
type GetUserTransitivePermissionBadRequest struct {
	Payload *models.APIError
}

func (o *GetUserTransitivePermissionBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/permissions/user/{username}/transitive][%d] getUserTransitivePermissionBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserTransitivePermissionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserTransitivePermissionUnauthorized creates a GetUserTransitivePermissionUnauthorized with default headers values
func NewGetUserTransitivePermissionUnauthorized() *GetUserTransitivePermissionUnauthorized {
	return &GetUserTransitivePermissionUnauthorized{}
}

/*GetUserTransitivePermissionUnauthorized handles this case with default header values.

Session required
*/
type GetUserTransitivePermissionUnauthorized struct {
	Payload *models.APIError
}

func (o *GetUserTransitivePermissionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/permissions/user/{username}/transitive][%d] getUserTransitivePermissionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserTransitivePermissionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserTransitivePermissionForbidden creates a GetUserTransitivePermissionForbidden with default headers values
func NewGetUserTransitivePermissionForbidden() *GetUserTransitivePermissionForbidden {
	return &GetUserTransitivePermissionForbidden{}
}

/*GetUserTransitivePermissionForbidden handles this case with default header values.

Unauthorized access
*/
type GetUserTransitivePermissionForbidden struct {
	Payload *models.APIError
}

func (o *GetUserTransitivePermissionForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/permissions/user/{username}/transitive][%d] getUserTransitivePermissionForbidden  %+v", 403, o.Payload)
}

func (o *GetUserTransitivePermissionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserTransitivePermissionNotFound creates a GetUserTransitivePermissionNotFound with default headers values
func NewGetUserTransitivePermissionNotFound() *GetUserTransitivePermissionNotFound {
	return &GetUserTransitivePermissionNotFound{}
}

/*GetUserTransitivePermissionNotFound handles this case with default header values.

Not found
*/
type GetUserTransitivePermissionNotFound struct {
	Payload *models.APIError
}

func (o *GetUserTransitivePermissionNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/permissions/user/{username}/transitive][%d] getUserTransitivePermissionNotFound  %+v", 404, o.Payload)
}

func (o *GetUserTransitivePermissionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
