// Code generated by go-swagger; DO NOT EDIT.

package discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/dlespiau/quay-exporter/pkg/models"
)

// DiscoveryReader is a Reader for the Discovery structure.
type DiscoveryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DiscoveryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDiscoveryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDiscoveryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDiscoveryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDiscoveryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDiscoveryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDiscoveryOK creates a DiscoveryOK with default headers values
func NewDiscoveryOK() *DiscoveryOK {
	return &DiscoveryOK{}
}

/*DiscoveryOK handles this case with default header values.

Successful invocation
*/
type DiscoveryOK struct {
}

func (o *DiscoveryOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/discovery][%d] discoveryOK ", 200)
}

func (o *DiscoveryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDiscoveryBadRequest creates a DiscoveryBadRequest with default headers values
func NewDiscoveryBadRequest() *DiscoveryBadRequest {
	return &DiscoveryBadRequest{}
}

/*DiscoveryBadRequest handles this case with default header values.

Bad Request
*/
type DiscoveryBadRequest struct {
	Payload *models.APIError
}

func (o *DiscoveryBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/discovery][%d] discoveryBadRequest  %+v", 400, o.Payload)
}

func (o *DiscoveryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDiscoveryUnauthorized creates a DiscoveryUnauthorized with default headers values
func NewDiscoveryUnauthorized() *DiscoveryUnauthorized {
	return &DiscoveryUnauthorized{}
}

/*DiscoveryUnauthorized handles this case with default header values.

Session required
*/
type DiscoveryUnauthorized struct {
	Payload *models.APIError
}

func (o *DiscoveryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/discovery][%d] discoveryUnauthorized  %+v", 401, o.Payload)
}

func (o *DiscoveryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDiscoveryForbidden creates a DiscoveryForbidden with default headers values
func NewDiscoveryForbidden() *DiscoveryForbidden {
	return &DiscoveryForbidden{}
}

/*DiscoveryForbidden handles this case with default header values.

Unauthorized access
*/
type DiscoveryForbidden struct {
	Payload *models.APIError
}

func (o *DiscoveryForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/discovery][%d] discoveryForbidden  %+v", 403, o.Payload)
}

func (o *DiscoveryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDiscoveryNotFound creates a DiscoveryNotFound with default headers values
func NewDiscoveryNotFound() *DiscoveryNotFound {
	return &DiscoveryNotFound{}
}

/*DiscoveryNotFound handles this case with default header values.

Not found
*/
type DiscoveryNotFound struct {
	Payload *models.APIError
}

func (o *DiscoveryNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/discovery][%d] discoveryNotFound  %+v", 404, o.Payload)
}

func (o *DiscoveryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
