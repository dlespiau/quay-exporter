// Code generated by go-swagger; DO NOT EDIT.

package quay

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/dlespiau/quay-exporter/pkg/quay/billing"
	"github.com/dlespiau/quay-exporter/pkg/quay/build"
	"github.com/dlespiau/quay-exporter/pkg/quay/discovery"
	"github.com/dlespiau/quay-exporter/pkg/quay/error"
	"github.com/dlespiau/quay-exporter/pkg/quay/globalmessages"
	"github.com/dlespiau/quay-exporter/pkg/quay/image"
	"github.com/dlespiau/quay-exporter/pkg/quay/logs"
	"github.com/dlespiau/quay-exporter/pkg/quay/manifest"
	"github.com/dlespiau/quay-exporter/pkg/quay/organization"
	"github.com/dlespiau/quay-exporter/pkg/quay/permission"
	"github.com/dlespiau/quay-exporter/pkg/quay/prototype"
	"github.com/dlespiau/quay-exporter/pkg/quay/repository"
	"github.com/dlespiau/quay-exporter/pkg/quay/repositorynotification"
	"github.com/dlespiau/quay-exporter/pkg/quay/repotoken"
	"github.com/dlespiau/quay-exporter/pkg/quay/robot"
	"github.com/dlespiau/quay-exporter/pkg/quay/search"
	"github.com/dlespiau/quay-exporter/pkg/quay/secscan"
	"github.com/dlespiau/quay-exporter/pkg/quay/signing"
	"github.com/dlespiau/quay-exporter/pkg/quay/tag"
	"github.com/dlespiau/quay-exporter/pkg/quay/team"
	"github.com/dlespiau/quay-exporter/pkg/quay/trigger"
	"github.com/dlespiau/quay-exporter/pkg/quay/user"
)

// Default client HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "quay.io"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new client HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Client {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new client HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Client {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new client client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	cli := new(Client)
	cli.Transport = transport

	cli.Billing = billing.New(transport, formats)

	cli.Build = build.New(transport, formats)

	cli.Discovery = discovery.New(transport, formats)

	cli.Error = error.New(transport, formats)

	cli.Globalmessages = globalmessages.New(transport, formats)

	cli.Image = image.New(transport, formats)

	cli.Logs = logs.New(transport, formats)

	cli.Manifest = manifest.New(transport, formats)

	cli.Organization = organization.New(transport, formats)

	cli.Permission = permission.New(transport, formats)

	cli.Prototype = prototype.New(transport, formats)

	cli.Repository = repository.New(transport, formats)

	cli.Repositorynotification = repositorynotification.New(transport, formats)

	cli.Repotoken = repotoken.New(transport, formats)

	cli.Robot = robot.New(transport, formats)

	cli.Search = search.New(transport, formats)

	cli.Secscan = secscan.New(transport, formats)

	cli.Signing = signing.New(transport, formats)

	cli.Tag = tag.New(transport, formats)

	cli.Team = team.New(transport, formats)

	cli.Trigger = trigger.New(transport, formats)

	cli.User = user.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Client is a client for client
type Client struct {
	Billing *billing.Client

	Build *build.Client

	Discovery *discovery.Client

	Error *error.Client

	Globalmessages *globalmessages.Client

	Image *image.Client

	Logs *logs.Client

	Manifest *manifest.Client

	Organization *organization.Client

	Permission *permission.Client

	Prototype *prototype.Client

	Repository *repository.Client

	Repositorynotification *repositorynotification.Client

	Repotoken *repotoken.Client

	Robot *robot.Client

	Search *search.Client

	Secscan *secscan.Client

	Signing *signing.Client

	Tag *tag.Client

	Team *team.Client

	Trigger *trigger.Client

	User *user.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Client) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.Billing.SetTransport(transport)

	c.Build.SetTransport(transport)

	c.Discovery.SetTransport(transport)

	c.Error.SetTransport(transport)

	c.Globalmessages.SetTransport(transport)

	c.Image.SetTransport(transport)

	c.Logs.SetTransport(transport)

	c.Manifest.SetTransport(transport)

	c.Organization.SetTransport(transport)

	c.Permission.SetTransport(transport)

	c.Prototype.SetTransport(transport)

	c.Repository.SetTransport(transport)

	c.Repositorynotification.SetTransport(transport)

	c.Repotoken.SetTransport(transport)

	c.Robot.SetTransport(transport)

	c.Search.SetTransport(transport)

	c.Secscan.SetTransport(transport)

	c.Signing.SetTransport(transport)

	c.Tag.SetTransport(transport)

	c.Team.SetTransport(transport)

	c.Trigger.SetTransport(transport)

	c.User.SetTransport(transport)

}
