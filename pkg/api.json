{
    "basePath": "/",
    "definitions": {
        "AddLabel": {
            "description": "Adds a label to a manifest",
            "properties": {
                "key": {
                    "description": "The key for the label",
                    "type": "string"
                },
                "media_type": {
                    "description": "The media type for this label",
                    "enum": [
                        "text/plain",
                        "application/json"
                    ],
                    "type": "string"
                },
                "value": {
                    "description": "The value for the label",
                    "type": "string"
                }
            },
            "required": [
                "key",
                "value",
                "media_type"
            ],
            "type": "object"
        },
        "ApiError": {
            "properties": {
                "detail": {
                    "description": "Details about the specific instance of the error.",
                    "type": "string"
                },
                "error_message": {
                    "description": "Deprecated; alias for detail",
                    "type": "string"
                },
                "error_type": {
                    "description": "Deprecated; alias for detail",
                    "type": "string"
                },
                "status": {
                    "description": "Status code of the response.",
                    "type": "integer"
                },
                "title": {
                    "description": "Unique error code to identify the type of error.",
                    "type": "string"
                },
                "type": {
                    "description": "Reference to the type of the error.",
                    "type": "string"
                }
            },
            "required": [
                "status",
                "type",
                "title"
            ],
            "type": "object"
        },
        "ApiErrorDescription": {
            "description": "Description of an error",
            "properties": {
                "description": {
                    "description": "A more detailed description of the error that may include help for fixing the issue.",
                    "type": "string"
                },
                "title": {
                    "description": "The title of the error. Can be used to uniquely identify the kind of error.",
                    "enum": [
                        "downstream_issue",
                        "exceeds_license",
                        "expired_token",
                        "external_service_timeout",
                        "fresh_login_required",
                        "insufficient_scope",
                        "invalid_request",
                        "invalid_response",
                        "invalid_token",
                        "not_found"
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "A reference to the error type resource",
                    "type": "string"
                }
            },
            "required": [
                "type",
                "description",
                "title"
            ],
            "type": "object"
        },
        "BuildTriggerActivateRequest": {
            "properties": {
                "config": {
                    "description": "Arbitrary json.",
                    "type": "object"
                },
                "pull_robot": {
                    "description": "The name of the robot that will be used to pull images.",
                    "type": "string"
                }
            },
            "required": [
                "config"
            ],
            "type": "object"
        },
        "ChangeRepoTrust": {
            "description": "Change the trust settings for the repository.",
            "properties": {
                "trust_enabled": {
                    "description": "Whether or not signing is enabled for the repository.",
                    "type": "boolean"
                }
            },
            "required": [
                "trust_enabled"
            ],
            "type": "object"
        },
        "ChangeTag": {
            "description": "Makes changes to a specific tag",
            "properties": {
                "expiration": {
                    "description": "(If specified) The expiration for the image",
                    "type": [
                        "number",
                        "null"
                    ]
                },
                "image": {
                    "description": "(If specified) Image identifier to which the tag should point",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "ChangeVisibility": {
            "description": "Change the visibility for the repository.",
            "properties": {
                "visibility": {
                    "description": "Visibility which the repository will start with",
                    "enum": [
                        "public",
                        "private"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "visibility"
            ],
            "type": "object"
        },
        "CreateMessage": {
            "description": "Create a new message",
            "id": "CreateMessage",
            "properties": {
                "message": {
                    "description": "A single message",
                    "properties": {
                        "content": {
                            "description": "The actual message",
                            "type": "string"
                        },
                        "media_type": {
                            "description": "The media type of the message",
                            "enum": [
                                "text/plain",
                                "text/markdown"
                            ],
                            "type": "string"
                        },
                        "severity": {
                            "description": "The severity of the message",
                            "enum": [
                                "info",
                                "warning",
                                "error"
                            ],
                            "type": "string"
                        }
                    },
                    "required": [
                        "content",
                        "media_type",
                        "severity"
                    ],
                    "type": "object"
                }
            },
            "type": "object"
        },
        "GetRepo": {
            "description": "Response body of a successful getRepo.",
            "properties": {
                "can_admin": {
                    "type": "boolean"
                },
                "can_write": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "is_organization": {
                    "type": "boolean"
                },
                "is_public": {
                    "type": "boolean"
                },
                "is_starred": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "status_token": {
                    "type": "string"
                },
                "tag_expiration_s": {
                    "type": "number"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "properties" : {
                            "image_id": {
                                "type": "string"
                            },
                            "last_modififed": {
                                "type": "string"
                            },
                            "manifest_digest": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            },
                            "size": {
                                "type": "number"
                            }
                        }
                    }
                },
                "trust_enabled": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ImageSecurity": {
            "description": "Response body of a successful v.",
            "properties": {
                "status": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "properties": {
                        "Layer": {
                            "type": "object",
                            "properties": {
                                "Features": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "AddedBy": {
                                                "type": "string"
                                            },
                                            "Name": {
                                                "type": "string"
                                            },
                                            "NamespaceName": {
                                                "type": "string"
                                            },
                                            "Version": {
                                                "type": "string"
                                            },
                                            "VersionFormat": {
                                                "type": "string"
                                            },
                                            "Vulnerabilities": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "FixedBy": {
                                                            "type": "string"
                                                        },
                                                        "Link": {
                                                            "type": "string"
                                                        },
                                                        "Metadata": {
                                                            "type": "object",
                                                            "properties": {
                                                                "NVD": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "CVSSv2": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "Score": {
                                                                                    "type": "number"
                                                                                },
                                                                                "Vectors": {
                                                                                    "type": "string"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "Name": {
                                                            "type": "string"
                                                        },
                                                        "NamespaceName": {
                                                            "type": "string"
                                                        },
                                                        "Severity": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "IndexedByVersion": {
                                    "type": "number"
                                },
                                "Name": {
                                    "type": "string"
                                },
                                "NamespaceName": {
                                    "type": "string"
                                },
                                "ParentName": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "type": "object"
        },
        "ListRepos": {
            "description": "Response body of a successful listRepos.",
            "properties": {
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "kind": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            },
                            "namespace": {
                                "type": "string"
                            },
                            "is_public": {
                                "type": "boolean"
                            },
                            "is_starred": {
                                "type": "boolean"
                            },
                            "description": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "type": "object"
        },
        "ListRepoTags": {
            "description": "Response body of a successful listRepoTags.",
            "properties": {
                "has_additional": {
                    "type": "boolean"
                },
                "page": {
                    "type": "number"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "reversion": {
                                "type": "boolean"
                            },
                            "manifest_digest": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            },
                            "docker_image_id": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "type": "object"
        },
        "NewApp": {
            "description": "Description of a new organization application.",
            "properties": {
                "application_uri": {
                    "description": "The URI for the application's homepage",
                    "type": "string"
                },
                "avatar_email": {
                    "description": "The e-mail address of the avatar to use for the application",
                    "type": "string"
                },
                "description": {
                    "description": "The human-readable description for the application",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the application",
                    "type": "string"
                },
                "redirect_uri": {
                    "description": "The URI for the application's OAuth redirect",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "NewOrg": {
            "description": "Description of a new organization.",
            "properties": {
                "email": {
                    "description": "Organization contact email",
                    "type": "string"
                },
                "name": {
                    "description": "Organization username",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "NewPrototype": {
            "description": "Description of a new prototype",
            "properties": {
                "activating_user": {
                    "description": "Repository creating user to whom the rule should apply",
                    "properties": {
                        "name": {
                            "description": "The username for the activating_user",
                            "type": "string"
                        }
                    },
                    "required": [
                        "name"
                    ],
                    "type": "object"
                },
                "delegate": {
                    "description": "Information about the user or team to which the rule grants access",
                    "properties": {
                        "kind": {
                            "description": "Whether the delegate is a user or a team",
                            "enum": [
                                "user",
                                "team"
                            ],
                            "type": "string"
                        },
                        "name": {
                            "description": "The name for the delegate team or user",
                            "type": "string"
                        }
                    },
                    "required": [
                        "name",
                        "kind"
                    ],
                    "type": "object"
                },
                "role": {
                    "description": "Role that should be applied to the delegate",
                    "enum": [
                        "read",
                        "write",
                        "admin"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "role",
                "delegate"
            ],
            "type": "object"
        },
        "NewRepo": {
            "description": "Description of a new repository",
            "properties": {
                "description": {
                    "description": "Markdown encoded description for the repository",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace in which the repository should be created. If omitted, the username of the caller is used",
                    "type": "string"
                },
                "repo_kind": {
                    "description": "The kind of repository",
                    "enum": [
                        "image",
                        "application"
                    ],
                    "type": "string"
                },
                "repository": {
                    "description": "Repository name",
                    "type": "string"
                },
                "visibility": {
                    "description": "Visibility which the repository will start with",
                    "enum": [
                        "public",
                        "private"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "repository",
                "visibility",
                "description"
            ],
            "type": "object"
        },
        "NewStarredRepository": {
            "properties": {
                "namespace": {
                    "description": "Namespace in which the repository belongs",
                    "type": "string"
                },
                "repository": {
                    "description": "Repository name",
                    "type": "string"
                }
            },
            "required": [
                "namespace",
                "repository"
            ],
            "type": "object"
        },
        "NewToken": {
            "description": "Description of a new token.",
            "properties": {
                "friendlyName": {
                    "description": "Friendly name to help identify the token",
                    "type": "string"
                }
            },
            "required": [
                "friendlyName"
            ],
            "type": "object"
        },
        "NewUser": {
            "description": "Fields which must be specified for a new user.",
            "properties": {
                "email": {
                    "description": "The user's email address",
                    "type": "string"
                },
                "invite_code": {
                    "description": "The optional invite code",
                    "type": "string"
                },
                "password": {
                    "description": "The user's password",
                    "type": "string"
                },
                "recaptcha_response": {
                    "description": "The (may be disabled) recaptcha response code for verification",
                    "type": "string"
                },
                "username": {
                    "description": "The user's username",
                    "type": "string"
                }
            },
            "required": [
                "username",
                "password"
            ],
            "type": "object"
        },
        "NotificationCreateRequest": {
            "description": "Information for creating a notification on a repository",
            "properties": {
                "config": {
                    "description": "JSON config information for the specific method of notification",
                    "type": "object"
                },
                "event": {
                    "description": "The event on which the notification will respond",
                    "type": "string"
                },
                "eventConfig": {
                    "description": "JSON config information for the specific event of notification",
                    "type": "object"
                },
                "method": {
                    "description": "The method of notification (such as email or web callback)",
                    "type": "string"
                },
                "title": {
                    "description": "The human-readable title of the notification",
                    "type": "string"
                }
            },
            "required": [
                "event",
                "method",
                "config",
                "eventConfig"
            ],
            "type": "object"
        },
        "PrototypeUpdate": {
            "description": "Description of a the new prototype role",
            "properties": {
                "role": {
                    "description": "Role that should be applied to the permission",
                    "enum": [
                        "read",
                        "write",
                        "admin"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "role"
            ],
            "type": "object"
        },
        "RepoUpdate": {
            "description": "Fields which can be updated in a repository.",
            "properties": {
                "description": {
                    "description": "Markdown encoded description for the repository",
                    "type": "string"
                }
            },
            "required": [
                "description"
            ],
            "type": "object"
        },
        "RepositoryBuildRequest": {
            "description": "Description of a new repository build.",
            "properties": {
                "archive_url": {
                    "description": "The URL of the .tar.gz to build. Must start with \"http\" or \"https\".",
                    "type": "string"
                },
                "context": {
                    "description": "Pass in the context for the dockerfile. This is optional.",
                    "type": "string"
                },
                "docker_tags": {
                    "description": "The tags to which the built images will be pushed. If none specified, \"latest\" is used.",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true
                },
                "dockerfile_path": {
                    "description": "Path to a dockerfile. You can only specify this or subdirectory.",
                    "type": "string"
                },
                "file_id": {
                    "description": "The file id that was generated when the build spec was uploaded",
                    "type": "string"
                },
                "pull_robot": {
                    "description": "Username of a Quay robot account to use as pull credentials",
                    "type": "string"
                },
                "subdirectory": {
                    "description": "Subdirectory in which the Dockerfile can be found. You can only specify this or dockerfile_path",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RestoreTag": {
            "description": "Restores a tag to a specific image",
            "properties": {
                "image": {
                    "description": "Image identifier to which the tag should point",
                    "type": "string"
                },
                "manifest_digest": {
                    "description": "If specified, the manifest digest that should be used",
                    "type": "string"
                }
            },
            "required": [
                "image"
            ],
            "type": "object"
        },
        "RunParameters": {
            "additionalProperties": false,
            "description": "Optional run parameters for activating the build trigger",
            "properties": {
                "branch_name": {
                    "description": "(SCM only) If specified, the name of the branch to build.",
                    "type": "string"
                },
                "commit_sha": {
                    "description": "(Custom Only) If specified, the ref/SHA1 used to checkout a git repository.",
                    "type": "string"
                },
                "refs": {
                    "description": "(SCM Only) If specified, the ref to build.",
                    "type": [
                        "object",
                        "null"
                    ]
                }
            },
            "type": "object"
        },
        "TeamDescription": {
            "description": "Description of a team",
            "properties": {
                "description": {
                    "description": "Markdown description for the team",
                    "type": "string"
                },
                "role": {
                    "description": "Org wide permissions that should apply to the team",
                    "enum": [
                        "member",
                        "creator",
                        "admin"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "role"
            ],
            "type": "object"
        },
        "TeamPermission": {
            "description": "Description of a team permission.",
            "properties": {
                "role": {
                    "description": "Role to use for the team",
                    "enum": [
                        "read",
                        "write",
                        "admin"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "role"
            ],
            "type": "object"
        },
        "TokenPermission": {
            "description": "Description of a token permission",
            "properties": {
                "role": {
                    "description": "Role to use for the token",
                    "enum": [
                        "read",
                        "write",
                        "admin"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "role"
            ],
            "type": "object"
        },
        "UpdateApp": {
            "description": "Description of an updated application.",
            "properties": {
                "application_uri": {
                    "description": "The URI for the application's homepage",
                    "type": "string"
                },
                "avatar_email": {
                    "description": "The e-mail address of the avatar to use for the application",
                    "type": "string"
                },
                "description": {
                    "description": "The human-readable description for the application",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the application",
                    "type": "string"
                },
                "redirect_uri": {
                    "description": "The URI for the application's OAuth redirect",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "redirect_uri",
                "application_uri"
            ],
            "type": "object"
        },
        "UpdateOrg": {
            "description": "Description of updates for an existing organization",
            "properties": {
                "email": {
                    "description": "Organization contact email",
                    "type": "string"
                },
                "invoice_email": {
                    "description": "Whether the organization desires to receive emails for invoices",
                    "type": "boolean"
                },
                "invoice_email_address": {
                    "description": "The email address at which to receive invoices",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "tag_expiration_s": {
                    "description": "The number of seconds for tag expiration",
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "UpdateUser": {
            "description": "Fields which can be updated in a user.",
            "properties": {
                "company": {
                    "description": "The optional entered company for the user",
                    "type": "string"
                },
                "email": {
                    "description": "The user's email address",
                    "type": "string"
                },
                "family_name": {
                    "description": "The optional entered family name for the user",
                    "type": "string"
                },
                "given_name": {
                    "description": "The optional entered given name for the user",
                    "type": "string"
                },
                "invoice_email": {
                    "description": "Whether the user desires to receive an invoice email.",
                    "type": "boolean"
                },
                "invoice_email_address": {
                    "description": "Custom email address for receiving invoices",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "password": {
                    "description": "The user's password",
                    "type": "string"
                },
                "tag_expiration_s": {
                    "description": "The number of seconds for tag expiration",
                    "minimum": 0,
                    "type": "integer"
                },
                "username": {
                    "description": "The user's username",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserPermission": {
            "description": "Description of a user permission.",
            "properties": {
                "role": {
                    "description": "Role to use for the user",
                    "enum": [
                        "read",
                        "write",
                        "admin"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "role"
            ],
            "type": "object"
        },
        "UserView": {
            "description": "Describes a user",
            "properties": {
                "anonymous": {
                    "description": "true if this user data represents a guest user",
                    "type": "boolean"
                },
                "avatar": {
                    "description": "Avatar data representing the user's icon",
                    "type": "object"
                },
                "can_create_repo": {
                    "description": "Whether the user has permission to create repositories",
                    "type": "boolean"
                },
                "email": {
                    "description": "The user's email address",
                    "type": "string"
                },
                "logins": {
                    "description": "The list of external login providers against which the user has authenticated",
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "organizations": {
                    "description": "Information about the organizations in which the user is a member",
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "preferred_namespace": {
                    "description": "If true, the user's namespace is the preferred namespace to display",
                    "type": "boolean"
                },
                "verified": {
                    "description": "Whether the user's email address has been verified",
                    "type": "boolean"
                }
            },
            "required": [
                "anonymous",
                "avatar"
            ],
            "type": "object"
        }
    },
    "host": "quay.io",
    "info": {
        "contact": {
            "email": "support@quay.io"
        },
        "description": "This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.",
        "termsOfService": "https://quay.io/tos",
        "title": "Quay Frontend",
        "version": "v1"
    },
    "paths": {
        "/api/v1/app/{client_id}": {
            "get": {
                "description": "Get information on the specified application.",
                "operationId": "getApplicationInformation",
                "parameters": [
                    {
                        "description": "The OAuth client ID",
                        "in": "path",
                        "name": "client_id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "tags": [
                    "organization"
                ]
            },
            "parameters": [
                {
                    "description": "The OAuth client ID",
                    "in": "path",
                    "name": "client_id",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.organization.ApplicationInformation",
            "x-path": "/api/v1/app/{client_id}",
            "x-tag": "organization"
        },
        "/api/v1/discovery": {
            "get": {
                "description": "List all of the API endpoints available in the swagger API format.",
                "operationId": "discovery",
                "parameters": [
                    {
                        "description": "Whether to include internal APIs.",
                        "in": "query",
                        "name": "internal",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "tags": [
                    "discovery"
                ]
            },
            "x-name": "endpoints.api.discovery.DiscoveryResource",
            "x-path": "/api/v1/discovery",
            "x-tag": "discovery"
        },
        "/api/v1/entities/{prefix}": {
            "get": {
                "description": "Get a list of entities that match the specified prefix.",
                "operationId": "getMatchingEntities",
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "prefix",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Whether to include orgs names.",
                        "in": "query",
                        "name": "includeOrgs",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "Whether to include team names.",
                        "in": "query",
                        "name": "includeTeams",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "Namespace to use when querying for org entities.",
                        "in": "query",
                        "name": "namespace",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "tags": [
                    "search"
                ]
            },
            "x-name": "endpoints.api.search.EntitySearch",
            "x-path": "/api/v1/entities/{prefix}",
            "x-tag": "search"
        },
        "/api/v1/error/{error_type}": {
            "get": {
                "description": "Get a detailed description of the error",
                "operationId": "getErrorDescription",
                "parameters": [
                    {
                        "description": "The error code identifying the type of error.",
                        "in": "path",
                        "name": "error_type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation",
                        "schema": {
                            "$ref": "#/definitions/ApiErrorDescription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "tags": [
                    "error"
                ]
            },
            "parameters": [
                {
                    "description": "The error code identifying the type of error.",
                    "in": "path",
                    "name": "error_type",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.error.Error",
            "x-path": "/api/v1/error/{error_type}",
            "x-tag": "error"
        },
        "/api/v1/find/all": {
            "get": {
                "description": "Get a list of entities and resources that match the specified query.",
                "operationId": "conductSearch",
                "parameters": [
                    {
                        "description": "The search query.",
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "search"
                ]
            },
            "x-name": "endpoints.api.search.ConductSearch",
            "x-path": "/api/v1/find/all",
            "x-tag": "search"
        },
        "/api/v1/find/repositories": {
            "get": {
                "description": "Get a list of apps and repositories that match the specified query.",
                "operationId": "conductRepoSearch",
                "parameters": [
                    {
                        "description": "The page.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "The search query.",
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "tags": [
                    "search"
                ]
            },
            "x-name": "endpoints.api.search.ConductRepositorySearch",
            "x-path": "/api/v1/find/repositories",
            "x-tag": "search"
        },
        "/api/v1/messages": {
            "get": {
                "description": "Return a super users messages",
                "operationId": "getGlobalMessages",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "tags": [
                    "globalmessages"
                ]
            },
            "post": {
                "description": "Create a message",
                "operationId": "createGlobalMessage",
                "parameters": [
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateMessage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "super:user"
                        ]
                    }
                ],
                "tags": [
                    "globalmessages"
                ]
            },
            "x-name": "endpoints.api.globalmessages.GlobalUserMessages",
            "x-path": "/api/v1/messages",
            "x-tag": "globalmessages"
        },
        "/api/v1/organization/": {
            "post": {
                "description": "Create a new organization.",
                "operationId": "createOrganization",
                "parameters": [
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewOrg"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "user:admin"
                        ]
                    }
                ],
                "tags": [
                    "organization"
                ]
            },
            "x-name": "endpoints.api.organization.OrganizationList",
            "x-path": "/api/v1/organization/",
            "x-tag": "organization"
        },
        "/api/v1/organization/{orgname}": {
            "delete": {
                "description": "Deletes the specified organization.",
                "operationId": "deleteAdminedOrganization",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "organization"
                ]
            },
            "get": {
                "description": "Get the details for the specified organization",
                "operationId": "getOrganization",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "organization"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Change the details for the specified organization.",
                "operationId": "changeOrganizationDetails",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateOrg"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "organization"
                ]
            },
            "x-name": "endpoints.api.organization.Organization",
            "x-path": "/api/v1/organization/{orgname}",
            "x-tag": "organization"
        },
        "/api/v1/organization/{orgname}/aggregatelogs": {
            "get": {
                "description": "Gets the aggregated logs for the specified organization.",
                "operationId": "getAggregateOrgLogs",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Username for which to filter logs.",
                        "in": "query",
                        "name": "performer",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Latest time to which to get logs. (%m/%d/%Y %Z)",
                        "in": "query",
                        "name": "endtime",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Earliest time from which to get logs. (%m/%d/%Y %Z)",
                        "in": "query",
                        "name": "starttime",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "logs"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.logs.OrgAggregateLogs",
            "x-path": "/api/v1/organization/{orgname}/aggregatelogs",
            "x-tag": "logs"
        },
        "/api/v1/organization/{orgname}/applications": {
            "get": {
                "description": "List the applications for the specified organization",
                "operationId": "getOrganizationApplications",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "organization"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Creates a new application under this organization.",
                "operationId": "createOrganizationApplication",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewApp"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "organization"
                ]
            },
            "x-name": "endpoints.api.organization.OrganizationApplications",
            "x-path": "/api/v1/organization/{orgname}/applications",
            "x-tag": "organization"
        },
        "/api/v1/organization/{orgname}/applications/{client_id}": {
            "delete": {
                "description": "Deletes the application under this organization.",
                "operationId": "deleteOrganizationApplication",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The OAuth client ID",
                        "in": "path",
                        "name": "client_id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "organization"
                ]
            },
            "get": {
                "description": "Retrieves the application with the specified client_id under the specified organization",
                "operationId": "getOrganizationApplication",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The OAuth client ID",
                        "in": "path",
                        "name": "client_id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "organization"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The OAuth client ID",
                    "in": "path",
                    "name": "client_id",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Updates an application under this organization.",
                "operationId": "updateOrganizationApplication",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The OAuth client ID",
                        "in": "path",
                        "name": "client_id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateApp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "organization"
                ]
            },
            "x-name": "endpoints.api.organization.OrganizationApplicationResource",
            "x-path": "/api/v1/organization/{orgname}/applications/{client_id}",
            "x-tag": "organization"
        },
        "/api/v1/organization/{orgname}/invoices": {
            "get": {
                "description": "List the invoices for the specified orgnaization.",
                "operationId": "listOrgInvoices",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "billing"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.billing.OrganizationInvoiceList",
            "x-path": "/api/v1/organization/{orgname}/invoices",
            "x-tag": "billing"
        },
        "/api/v1/organization/{orgname}/logs": {
            "get": {
                "description": "List the logs for the specified organization.",
                "operationId": "listOrgLogs",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The page token for the next page",
                        "in": "query",
                        "name": "next_page",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page number for the logs",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Username for which to filter logs.",
                        "in": "query",
                        "name": "performer",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Latest time to which to get logs. (%m/%d/%Y %Z)",
                        "in": "query",
                        "name": "endtime",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Earliest time from which to get logs. (%m/%d/%Y %Z)",
                        "in": "query",
                        "name": "starttime",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "logs"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.logs.OrgLogs",
            "x-path": "/api/v1/organization/{orgname}/logs",
            "x-tag": "logs"
        },
        "/api/v1/organization/{orgname}/members": {
            "get": {
                "description": "List the human members of the specified organization.",
                "operationId": "getOrganizationMembers",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "organization"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.organization.OrganizationMemberList",
            "x-path": "/api/v1/organization/{orgname}/members",
            "x-tag": "organization"
        },
        "/api/v1/organization/{orgname}/members/{membername}": {
            "delete": {
                "description": "Removes a member from an organization, revoking all its repository\n        priviledges and removing it from all teams in the organization.",
                "operationId": "removeOrganizationMember",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The username of the organization member",
                        "in": "path",
                        "name": "membername",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "organization"
                ]
            },
            "get": {
                "description": "Retrieves the details of a member of the organization.",
                "operationId": "getOrganizationMember",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The username of the organization member",
                        "in": "path",
                        "name": "membername",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "organization"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The username of the organization member",
                    "in": "path",
                    "name": "membername",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.organization.OrganizationMember",
            "x-path": "/api/v1/organization/{orgname}/members/{membername}",
            "x-tag": "organization"
        },
        "/api/v1/organization/{orgname}/prototypes": {
            "get": {
                "description": "List the existing prototypes for this organization.",
                "operationId": "getOrganizationPrototypePermissions",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "prototype"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new permission prototype.",
                "operationId": "createOrganizationPrototypePermission",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewPrototype"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "prototype"
                ]
            },
            "x-name": "endpoints.api.prototype.PermissionPrototypeList",
            "x-path": "/api/v1/organization/{orgname}/prototypes",
            "x-tag": "prototype"
        },
        "/api/v1/organization/{orgname}/prototypes/{prototypeid}": {
            "delete": {
                "description": "Delete an existing permission prototype.",
                "operationId": "deleteOrganizationPrototypePermission",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the prototype",
                        "in": "path",
                        "name": "prototypeid",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "prototype"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The ID of the prototype",
                    "in": "path",
                    "name": "prototypeid",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Update the role of an existing permission prototype.",
                "operationId": "updateOrganizationPrototypePermission",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the prototype",
                        "in": "path",
                        "name": "prototypeid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PrototypeUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "prototype"
                ]
            },
            "x-name": "endpoints.api.prototype.PermissionPrototype",
            "x-path": "/api/v1/organization/{orgname}/prototypes/{prototypeid}",
            "x-tag": "prototype"
        },
        "/api/v1/organization/{orgname}/robots": {
            "get": {
                "description": "List the organization's robots.",
                "operationId": "getOrgRobots",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Whether to include repostories and teams in which the robots have permission.",
                        "in": "query",
                        "name": "permissions",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "robot"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.robot.OrgRobotList",
            "x-path": "/api/v1/organization/{orgname}/robots",
            "x-tag": "robot"
        },
        "/api/v1/organization/{orgname}/robots/{robot_shortname}": {
            "delete": {
                "description": "Delete an existing organization robot.",
                "operationId": "deleteOrgRobot",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The short name for the robot, without any user or organization prefix",
                        "in": "path",
                        "name": "robot_shortname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "robot"
                ]
            },
            "get": {
                "description": "Returns the organization's robot with the specified name.",
                "operationId": "getOrgRobot",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The short name for the robot, without any user or organization prefix",
                        "in": "path",
                        "name": "robot_shortname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "robot"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The short name for the robot, without any user or organization prefix",
                    "in": "path",
                    "name": "robot_shortname",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Create a new robot in the organization.",
                "operationId": "createOrgRobot",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The short name for the robot, without any user or organization prefix",
                        "in": "path",
                        "name": "robot_shortname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "robot"
                ]
            },
            "x-name": "endpoints.api.robot.OrgRobot",
            "x-path": "/api/v1/organization/{orgname}/robots/{robot_shortname}",
            "x-tag": "robot"
        },
        "/api/v1/organization/{orgname}/robots/{robot_shortname}/permissions": {
            "get": {
                "description": "Returns the list of repository permissions for the org's robot.",
                "operationId": "getOrgRobotPermissions",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The short name for the robot, without any user or organization prefix",
                        "in": "path",
                        "name": "robot_shortname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "user:admin"
                        ]
                    }
                ],
                "tags": [
                    "robot"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The short name for the robot, without any user or organization prefix",
                    "in": "path",
                    "name": "robot_shortname",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.robot.OrgRobotPermissions",
            "x-path": "/api/v1/organization/{orgname}/robots/{robot_shortname}/permissions",
            "x-tag": "robot"
        },
        "/api/v1/organization/{orgname}/robots/{robot_shortname}/regenerate": {
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The short name for the robot, without any user or organization prefix",
                    "in": "path",
                    "name": "robot_shortname",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Regenerates the token for an organization robot.",
                "operationId": "regenerateOrgRobotToken",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The short name for the robot, without any user or organization prefix",
                        "in": "path",
                        "name": "robot_shortname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "robot"
                ]
            },
            "x-name": "endpoints.api.robot.RegenerateOrgRobot",
            "x-path": "/api/v1/organization/{orgname}/robots/{robot_shortname}/regenerate",
            "x-tag": "robot"
        },
        "/api/v1/organization/{orgname}/team/{teamname}": {
            "delete": {
                "description": "Delete the specified team.",
                "operationId": "deleteOrganizationTeam",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the team",
                        "in": "path",
                        "name": "teamname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "team"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The name of the team",
                    "in": "path",
                    "name": "teamname",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Update the org-wide permission for the specified team.",
                "operationId": "updateOrganizationTeam",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the team",
                        "in": "path",
                        "name": "teamname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TeamDescription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "team"
                ]
            },
            "x-name": "endpoints.api.team.OrganizationTeam",
            "x-path": "/api/v1/organization/{orgname}/team/{teamname}",
            "x-tag": "team"
        },
        "/api/v1/organization/{orgname}/team/{teamname}/invite/{email}": {
            "delete": {
                "description": "Delete an invite of an email address to join a team.",
                "operationId": "deleteTeamMemberEmailInvite",
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "email",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "teamname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "team"
                ]
            },
            "put": {
                "description": "Invites an email address to an existing team.",
                "operationId": "inviteTeamMemberEmail",
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "email",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "teamname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "team"
                ]
            },
            "x-name": "endpoints.api.team.InviteTeamMember",
            "x-path": "/api/v1/organization/{orgname}/team/{teamname}/invite/{email}",
            "x-tag": "team"
        },
        "/api/v1/organization/{orgname}/team/{teamname}/members": {
            "get": {
                "description": "Retrieve the list of members for the specified team.",
                "operationId": "getOrganizationTeamMembers",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the team",
                        "in": "path",
                        "name": "teamname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Whether to include pending members",
                        "in": "query",
                        "name": "includePending",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "team"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The name of the team",
                    "in": "path",
                    "name": "teamname",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.team.TeamMemberList",
            "x-path": "/api/v1/organization/{orgname}/team/{teamname}/members",
            "x-tag": "team"
        },
        "/api/v1/organization/{orgname}/team/{teamname}/members/{membername}": {
            "delete": {
                "description": "Delete a member of a team. If the user is merely invited to join\n        the team, then the invite is removed instead.",
                "operationId": "deleteOrganizationTeamMember",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The username of the team member",
                        "in": "path",
                        "name": "membername",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the team",
                        "in": "path",
                        "name": "teamname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "team"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The username of the team member",
                    "in": "path",
                    "name": "membername",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The name of the team",
                    "in": "path",
                    "name": "teamname",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Adds or invites a member to an existing team.",
                "operationId": "updateOrganizationTeamMember",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The username of the team member",
                        "in": "path",
                        "name": "membername",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the team",
                        "in": "path",
                        "name": "teamname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "org:admin"
                        ]
                    }
                ],
                "tags": [
                    "team"
                ]
            },
            "x-name": "endpoints.api.team.TeamMember",
            "x-path": "/api/v1/organization/{orgname}/team/{teamname}/members/{membername}",
            "x-tag": "team"
        },
        "/api/v1/organization/{orgname}/team/{teamname}/permissions": {
            "get": {
                "description": "Returns the list of repository permissions for the org's team.",
                "operationId": "getOrganizationTeamPermissions",
                "parameters": [
                    {
                        "description": "The name of the organization",
                        "in": "path",
                        "name": "orgname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the team",
                        "in": "path",
                        "name": "teamname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "tags": [
                    "team"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the organization",
                    "in": "path",
                    "name": "orgname",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The name of the team",
                    "in": "path",
                    "name": "teamname",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.team.TeamPermissions",
            "x-path": "/api/v1/organization/{orgname}/team/{teamname}/permissions",
            "x-tag": "team"
        },
        "/api/v1/plans/": {
            "get": {
                "description": "List the avaialble plans.",
                "operationId": "listPlans",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "tags": [
                    "billing"
                ]
            },
            "x-name": "endpoints.api.billing.ListPlans",
            "x-path": "/api/v1/plans/",
            "x-tag": "billing"
        },
        "/api/v1/repository": {
            "get": {
                "description": "Fetch the list of repositories visible to the current user under a variety of situations.",
                "operationId": "listRepos",
                "parameters": [
                    {
                        "description": "The page token for the next page",
                        "in": "query",
                        "name": "next_page",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The kind of repositories to return",
                        "in": "query",
                        "name": "repo_kind",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Whether to include the repository's popularity metric.",
                        "in": "query",
                        "name": "popularity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "Whether to include when the repository was last modified.",
                        "in": "query",
                        "name": "last_modified",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "Adds any repositories visible to the user by virtue of being public",
                        "in": "query",
                        "name": "public",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "Filters the repositories returned to those starred by the user",
                        "in": "query",
                        "name": "starred",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "Filters the repositories returned to this namespace",
                        "in": "query",
                        "name": "namespace",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation",
                        "schema": {
                            "$ref": "#/definitions/ListRepos"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "repository"
                ]
            },
            "post": {
                "description": "Create a new repository.",
                "operationId": "createRepo",
                "parameters": [
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewRepo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:create"
                        ]
                    }
                ],
                "tags": [
                    "repository"
                ]
            },
            "x-name": "endpoints.api.repository.RepositoryList",
            "x-path": "/api/v1/repository",
            "x-tag": "repository"
        },
        "/api/v1/repository/{repository}": {
            "delete": {
                "description": "Delete a repository.",
                "operationId": "deleteRepository",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "repository"
                ]
            },
            "get": {
                "description": "Fetch the specified repository.",
                "operationId": "getRepo",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Whether to include action statistics",
                        "in": "query",
                        "name": "includeStats",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation",
                        "schema" : {
                            "$ref": "#/definitions/GetRepo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "repository"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Update the description in the specified repository.",
                "operationId": "updateRepo",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RepoUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:write"
                        ]
                    }
                ],
                "tags": [
                    "repository"
                ]
            },
            "x-name": "endpoints.api.repository.Repository",
            "x-path": "/api/v1/repository/{repository}",
            "x-tag": "repository"
        },
        "/api/v1/repository/{repository}/aggregatelogs": {
            "get": {
                "description": "Returns the aggregated logs for the specified repository.",
                "operationId": "getAggregateRepoLogs",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Latest time to which to get logs (%m/%d/%Y %Z)",
                        "in": "query",
                        "name": "endtime",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Earliest time from which to get logs (%m/%d/%Y %Z)",
                        "in": "query",
                        "name": "starttime",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "logs"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.logs.RepositoryAggregateLogs",
            "x-path": "/api/v1/repository/{repository}/aggregatelogs",
            "x-tag": "logs"
        },
        "/api/v1/repository/{repository}/build/": {
            "get": {
                "description": "Get the list of repository builds.",
                "operationId": "getRepoBuilds",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Returns all builds since the given unix timecode",
                        "in": "query",
                        "name": "since",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "The maximum number of builds to return",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "build"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Request that a repository be built and pushed from the specified input.",
                "operationId": "requestRepoBuild",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RepositoryBuildRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:write"
                        ]
                    }
                ],
                "tags": [
                    "build"
                ]
            },
            "x-name": "endpoints.api.build.RepositoryBuildList",
            "x-path": "/api/v1/repository/{repository}/build/",
            "x-tag": "build"
        },
        "/api/v1/repository/{repository}/build/{build_uuid}": {
            "delete": {
                "description": "Cancels a repository build.",
                "operationId": "cancelRepoBuild",
                "parameters": [
                    {
                        "description": "The UUID of the build",
                        "in": "path",
                        "name": "build_uuid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "build"
                ]
            },
            "get": {
                "description": "Returns information about a build.",
                "operationId": "getRepoBuild",
                "parameters": [
                    {
                        "description": "The UUID of the build",
                        "in": "path",
                        "name": "build_uuid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "build"
                ]
            },
            "parameters": [
                {
                    "description": "The UUID of the build",
                    "in": "path",
                    "name": "build_uuid",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.build.RepositoryBuildResource",
            "x-path": "/api/v1/repository/{repository}/build/{build_uuid}",
            "x-tag": "build"
        },
        "/api/v1/repository/{repository}/build/{build_uuid}/logs": {
            "get": {
                "description": "Return the build logs for the build specified by the build uuid.",
                "operationId": "getRepoBuildLogs",
                "parameters": [
                    {
                        "description": "The UUID of the build",
                        "in": "path",
                        "name": "build_uuid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "build"
                ]
            },
            "parameters": [
                {
                    "description": "The UUID of the build",
                    "in": "path",
                    "name": "build_uuid",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.build.RepositoryBuildLogs",
            "x-path": "/api/v1/repository/{repository}/build/{build_uuid}/logs",
            "x-tag": "build"
        },
        "/api/v1/repository/{repository}/build/{build_uuid}/status": {
            "get": {
                "description": "Return the status for the builds specified by the build uuids.",
                "operationId": "getRepoBuildStatus",
                "parameters": [
                    {
                        "description": "The UUID of the build",
                        "in": "path",
                        "name": "build_uuid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "build"
                ]
            },
            "parameters": [
                {
                    "description": "The UUID of the build",
                    "in": "path",
                    "name": "build_uuid",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.build.RepositoryBuildStatus",
            "x-path": "/api/v1/repository/{repository}/build/{build_uuid}/status",
            "x-tag": "build"
        },
        "/api/v1/repository/{repository}/changetrust": {
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Change the visibility of a repository.",
                "operationId": "changeRepoTrust",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangeRepoTrust"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "repository"
                ]
            },
            "x-name": "endpoints.api.repository.RepositoryTrust",
            "x-path": "/api/v1/repository/{repository}/changetrust",
            "x-tag": "repository"
        },
        "/api/v1/repository/{repository}/changevisibility": {
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Change the visibility of a repository.",
                "operationId": "changeRepoVisibility",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangeVisibility"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "repository"
                ]
            },
            "x-name": "endpoints.api.repository.RepositoryVisibility",
            "x-path": "/api/v1/repository/{repository}/changevisibility",
            "x-tag": "repository"
        },
        "/api/v1/repository/{repository}/image/": {
            "get": {
                "description": "List the images for the specified repository.",
                "operationId": "listRepositoryImages",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "image"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.image.RepositoryImageList",
            "x-path": "/api/v1/repository/{repository}/image/",
            "x-tag": "image"
        },
        "/api/v1/repository/{repository}/image/{image_id}": {
            "get": {
                "description": "Get the information available for the specified image.",
                "operationId": "getImage",
                "parameters": [
                    {
                        "description": "The Docker image ID",
                        "in": "path",
                        "name": "image_id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "image"
                ]
            },
            "parameters": [
                {
                    "description": "The Docker image ID",
                    "in": "path",
                    "name": "image_id",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.image.RepositoryImage",
            "x-path": "/api/v1/repository/{repository}/image/{image_id}",
            "x-tag": "image"
        },
        "/api/v1/repository/{repository}/image/{imageid}/security": {
            "get": {
                "description": "Fetches the features and vulnerabilities (if any) for a repository image.",
                "operationId": "getRepoImageSecurity",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The image ID",
                        "in": "path",
                        "name": "imageid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Include vulnerabilities informations",
                        "in": "query",
                        "name": "vulnerabilities",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation",
                        "schema": {
                            "$ref": "#/definitions/ImageSecurity"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "secscan"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The image ID",
                    "in": "path",
                    "name": "imageid",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.secscan.RepositoryImageSecurity",
            "x-path": "/api/v1/repository/{repository}/image/{imageid}/security",
            "x-tag": "secscan"
        },
        "/api/v1/repository/{repository}/logs": {
            "get": {
                "description": "List the logs for the specified repository.",
                "operationId": "listRepoLogs",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The page token for the next page",
                        "in": "query",
                        "name": "next_page",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page number for the logs",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Latest time to which to get logs (%m/%d/%Y %Z)",
                        "in": "query",
                        "name": "endtime",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Earliest time from which to get logs (%m/%d/%Y %Z)",
                        "in": "query",
                        "name": "starttime",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "logs"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.logs.RepositoryLogs",
            "x-path": "/api/v1/repository/{repository}/logs",
            "x-tag": "logs"
        },
        "/api/v1/repository/{repository}/manifest/{manifestref}/labels": {
            "get": {
                "description": "",
                "operationId": "listManifestLabels",
                "parameters": [
                    {
                        "description": "The digest of the manifest",
                        "in": "path",
                        "name": "manifestref",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "If specified, only labels matching the given prefix will be returned",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "manifest"
                ]
            },
            "parameters": [
                {
                    "description": "The digest of the manifest",
                    "in": "path",
                    "name": "manifestref",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Adds a new label into the tag manifest.",
                "operationId": "addManifestLabel",
                "parameters": [
                    {
                        "description": "The digest of the manifest",
                        "in": "path",
                        "name": "manifestref",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddLabel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:write"
                        ]
                    }
                ],
                "tags": [
                    "manifest"
                ]
            },
            "x-name": "endpoints.api.manifest.RepositoryManifestLabels",
            "x-path": "/api/v1/repository/{repository}/manifest/{manifestref}/labels",
            "x-tag": "manifest"
        },
        "/api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}": {
            "delete": {
                "description": "Deletes an existing label from a manifest.",
                "operationId": "deleteManifestLabel",
                "parameters": [
                    {
                        "description": "The ID of the label",
                        "in": "path",
                        "name": "labelid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The digest of the manifest",
                        "in": "path",
                        "name": "manifestref",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:write"
                        ]
                    }
                ],
                "tags": [
                    "manifest"
                ]
            },
            "get": {
                "description": "Retrieves the label with the specific ID under the manifest.",
                "operationId": "getManifestLabel",
                "parameters": [
                    {
                        "description": "The ID of the label",
                        "in": "path",
                        "name": "labelid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The digest of the manifest",
                        "in": "path",
                        "name": "manifestref",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "manifest"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The digest of the manifest",
                    "in": "path",
                    "name": "manifestref",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The ID of the label",
                    "in": "path",
                    "name": "labelid",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.manifest.ManageRepositoryManifestLabel",
            "x-path": "/api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}",
            "x-tag": "manifest"
        },
        "/api/v1/repository/{repository}/manifest/{manifestref}/security": {
            "get": {
                "description": "",
                "operationId": "getRepoManifestSecurity",
                "parameters": [
                    {
                        "description": "The digest of the manifest",
                        "in": "path",
                        "name": "manifestref",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Include vulnerabilities informations",
                        "in": "query",
                        "name": "vulnerabilities",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "secscan"
                ]
            },
            "parameters": [
                {
                    "description": "The digest of the manifest",
                    "in": "path",
                    "name": "manifestref",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.secscan.RepositoryManifestSecurity",
            "x-path": "/api/v1/repository/{repository}/manifest/{manifestref}/security",
            "x-tag": "secscan"
        },
        "/api/v1/repository/{repository}/notification/": {
            "get": {
                "description": "List the notifications for the specified repository.",
                "operationId": "listRepoNotifications",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "repositorynotification"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "",
                "operationId": "createRepoNotification",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NotificationCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "repositorynotification"
                ]
            },
            "x-name": "endpoints.api.repositorynotification.RepositoryNotificationList",
            "x-path": "/api/v1/repository/{repository}/notification/",
            "x-tag": "repositorynotification"
        },
        "/api/v1/repository/{repository}/notification/{uuid}": {
            "delete": {
                "description": "Deletes the specified notification.",
                "operationId": "deleteRepoNotification",
                "parameters": [
                    {
                        "description": "The UUID of the notification",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "repositorynotification"
                ]
            },
            "get": {
                "description": "Get information for the specified notification.",
                "operationId": "getRepoNotification",
                "parameters": [
                    {
                        "description": "The UUID of the notification",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "repositorynotification"
                ]
            },
            "parameters": [
                {
                    "description": "The UUID of the notification",
                    "in": "path",
                    "name": "uuid",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Resets repository notification to 0 failures.",
                "operationId": "resetRepositoryNotificationFailures",
                "parameters": [
                    {
                        "description": "The UUID of the notification",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "repositorynotification"
                ]
            },
            "x-name": "endpoints.api.repositorynotification.RepositoryNotification",
            "x-path": "/api/v1/repository/{repository}/notification/{uuid}",
            "x-tag": "repositorynotification"
        },
        "/api/v1/repository/{repository}/notification/{uuid}/test": {
            "parameters": [
                {
                    "description": "The UUID of the notification",
                    "in": "path",
                    "name": "uuid",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Queues a test notification for this repository.",
                "operationId": "testRepoNotification",
                "parameters": [
                    {
                        "description": "The UUID of the notification",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "repositorynotification"
                ]
            },
            "x-name": "endpoints.api.repositorynotification.TestRepositoryNotification",
            "x-path": "/api/v1/repository/{repository}/notification/{uuid}/test",
            "x-tag": "repositorynotification"
        },
        "/api/v1/repository/{repository}/permissions/team/": {
            "get": {
                "description": "List all team permission.",
                "operationId": "listRepoTeamPermissions",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "permission"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.permission.RepositoryTeamPermissionList",
            "x-path": "/api/v1/repository/{repository}/permissions/team/",
            "x-tag": "permission"
        },
        "/api/v1/repository/{repository}/permissions/team/{teamname}": {
            "delete": {
                "description": "Delete the permission for the specified team.",
                "operationId": "deleteTeamPermissions",
                "parameters": [
                    {
                        "description": "The name of the team to which the permission applies",
                        "in": "path",
                        "name": "teamname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "permission"
                ]
            },
            "get": {
                "description": "Fetch the permission for the specified team.",
                "operationId": "getTeamPermissions",
                "parameters": [
                    {
                        "description": "The name of the team to which the permission applies",
                        "in": "path",
                        "name": "teamname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "permission"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The name of the team to which the permission applies",
                    "in": "path",
                    "name": "teamname",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Update the existing team permission.",
                "operationId": "changeTeamPermissions",
                "parameters": [
                    {
                        "description": "The name of the team to which the permission applies",
                        "in": "path",
                        "name": "teamname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TeamPermission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "permission"
                ]
            },
            "x-name": "endpoints.api.permission.RepositoryTeamPermission",
            "x-path": "/api/v1/repository/{repository}/permissions/team/{teamname}",
            "x-tag": "permission"
        },
        "/api/v1/repository/{repository}/permissions/user/": {
            "get": {
                "description": "List all user permissions.",
                "operationId": "listRepoUserPermissions",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "permission"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.permission.RepositoryUserPermissionList",
            "x-path": "/api/v1/repository/{repository}/permissions/user/",
            "x-tag": "permission"
        },
        "/api/v1/repository/{repository}/permissions/user/{username}": {
            "delete": {
                "description": "Delete the permission for the user.",
                "operationId": "deleteUserPermissions",
                "parameters": [
                    {
                        "description": "The username of the user to which the permission applies",
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "permission"
                ]
            },
            "get": {
                "description": "Get the permission for the specified user.",
                "operationId": "getUserPermissions",
                "parameters": [
                    {
                        "description": "The username of the user to which the permission applies",
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "permission"
                ]
            },
            "parameters": [
                {
                    "description": "The username of the user to which the permission applies",
                    "in": "path",
                    "name": "username",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Update the perimssions for an existing repository.",
                "operationId": "changeUserPermissions",
                "parameters": [
                    {
                        "description": "The username of the user to which the permission applies",
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserPermission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "permission"
                ]
            },
            "x-name": "endpoints.api.permission.RepositoryUserPermission",
            "x-path": "/api/v1/repository/{repository}/permissions/user/{username}",
            "x-tag": "permission"
        },
        "/api/v1/repository/{repository}/permissions/user/{username}/transitive": {
            "get": {
                "description": "Get the fetch the permission for the specified user.",
                "operationId": "getUserTransitivePermission",
                "parameters": [
                    {
                        "description": "The username of the user to which the permissions apply",
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "permission"
                ]
            },
            "parameters": [
                {
                    "description": "The username of the user to which the permissions apply",
                    "in": "path",
                    "name": "username",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.permission.RepositoryUserTransitivePermission",
            "x-path": "/api/v1/repository/{repository}/permissions/user/{username}/transitive",
            "x-tag": "permission"
        },
        "/api/v1/repository/{repository}/signatures": {
            "get": {
                "description": "Fetches the list of signed tags for the repository.",
                "operationId": "getRepoSignatures",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "signing"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.signing.RepositorySignatures",
            "x-path": "/api/v1/repository/{repository}/signatures",
            "x-tag": "signing"
        },
        "/api/v1/repository/{repository}/tag/": {
            "get": {
                "description": "",
                "operationId": "listRepoTags",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Page index for the results. Default 1.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Limit to the number of results to return per page. Max 100.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filters the tags to the specific tag.",
                        "in": "query",
                        "name": "specificTag",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation",
                        "schema": {
                            "$ref": "#/definitions/ListRepoTags"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "tag"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.tag.ListRepositoryTags",
            "x-path": "/api/v1/repository/{repository}/tag/",
            "x-tag": "tag"
        },
        "/api/v1/repository/{repository}/tag/{tag}": {
            "delete": {
                "description": "Delete the specified repository tag.",
                "operationId": "deleteFullTag",
                "parameters": [
                    {
                        "description": "The name of the tag",
                        "in": "path",
                        "name": "tag",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:write"
                        ]
                    }
                ],
                "tags": [
                    "tag"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the tag",
                    "in": "path",
                    "name": "tag",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Change which image a tag points to or create a new tag.",
                "operationId": "changeTag",
                "parameters": [
                    {
                        "description": "The name of the tag",
                        "in": "path",
                        "name": "tag",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangeTag"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:write"
                        ]
                    }
                ],
                "tags": [
                    "tag"
                ]
            },
            "x-name": "endpoints.api.tag.RepositoryTag",
            "x-path": "/api/v1/repository/{repository}/tag/{tag}",
            "x-tag": "tag"
        },
        "/api/v1/repository/{repository}/tag/{tag}/images": {
            "get": {
                "description": "List the images for the specified repository tag.",
                "operationId": "listTagImages",
                "parameters": [
                    {
                        "description": "The name of the tag",
                        "in": "path",
                        "name": "tag",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "If specified, only images wholely owned by this tag are returned.",
                        "in": "query",
                        "name": "owned",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "tag"
                ]
            },
            "parameters": [
                {
                    "description": "The name of the tag",
                    "in": "path",
                    "name": "tag",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.tag.RepositoryTagImages",
            "x-path": "/api/v1/repository/{repository}/tag/{tag}/images",
            "x-tag": "tag"
        },
        "/api/v1/repository/{repository}/tag/{tag}/restore": {
            "parameters": [
                {
                    "description": "The name of the tag",
                    "in": "path",
                    "name": "tag",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Restores a repository tag back to a previous image in the repository.",
                "operationId": "restoreTag",
                "parameters": [
                    {
                        "description": "The name of the tag",
                        "in": "path",
                        "name": "tag",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RestoreTag"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:write"
                        ]
                    }
                ],
                "tags": [
                    "tag"
                ]
            },
            "x-name": "endpoints.api.tag.RestoreTag",
            "x-path": "/api/v1/repository/{repository}/tag/{tag}/restore",
            "x-tag": "tag"
        },
        "/api/v1/repository/{repository}/tokens/": {
            "get": {
                "description": "List the tokens for the specified repository.",
                "operationId": "listRepoTokens",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "repotoken"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new repository token.",
                "operationId": "createToken",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewToken"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "repotoken"
                ]
            },
            "x-name": "endpoints.api.repotoken.RepositoryTokenList",
            "x-path": "/api/v1/repository/{repository}/tokens/",
            "x-tag": "repotoken"
        },
        "/api/v1/repository/{repository}/tokens/{code}": {
            "delete": {
                "description": "Delete the repository token.",
                "operationId": "deleteToken",
                "parameters": [
                    {
                        "description": "The token code",
                        "in": "path",
                        "name": "code",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "repotoken"
                ]
            },
            "get": {
                "description": "Fetch the specified repository token information.",
                "operationId": "getTokens",
                "parameters": [
                    {
                        "description": "The token code",
                        "in": "path",
                        "name": "code",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "repotoken"
                ]
            },
            "parameters": [
                {
                    "description": "The token code",
                    "in": "path",
                    "name": "code",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Update the permissions for the specified repository token.",
                "operationId": "changeToken",
                "parameters": [
                    {
                        "description": "The token code",
                        "in": "path",
                        "name": "code",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenPermission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "repotoken"
                ]
            },
            "x-name": "endpoints.api.repotoken.RepositoryToken",
            "x-path": "/api/v1/repository/{repository}/tokens/{code}",
            "x-tag": "repotoken"
        },
        "/api/v1/repository/{repository}/trigger/": {
            "get": {
                "description": "List the triggers for the specified repository.",
                "operationId": "listBuildTriggers",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "trigger"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.trigger.BuildTriggerList",
            "x-path": "/api/v1/repository/{repository}/trigger/",
            "x-tag": "trigger"
        },
        "/api/v1/repository/{repository}/trigger/{trigger_uuid}": {
            "delete": {
                "description": "Delete the specified build trigger.",
                "operationId": "deleteBuildTrigger",
                "parameters": [
                    {
                        "description": "The UUID of the build trigger",
                        "in": "path",
                        "name": "trigger_uuid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "trigger"
                ]
            },
            "get": {
                "description": "Get information for the specified build trigger.",
                "operationId": "getBuildTrigger",
                "parameters": [
                    {
                        "description": "The UUID of the build trigger",
                        "in": "path",
                        "name": "trigger_uuid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "trigger"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The UUID of the build trigger",
                    "in": "path",
                    "name": "trigger_uuid",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.trigger.BuildTrigger",
            "x-path": "/api/v1/repository/{repository}/trigger/{trigger_uuid}",
            "x-tag": "trigger"
        },
        "/api/v1/repository/{repository}/trigger/{trigger_uuid}/activate": {
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The UUID of the build trigger",
                    "in": "path",
                    "name": "trigger_uuid",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Activate the specified build trigger.",
                "operationId": "activateBuildTrigger",
                "parameters": [
                    {
                        "description": "The UUID of the build trigger",
                        "in": "path",
                        "name": "trigger_uuid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BuildTriggerActivateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "trigger"
                ]
            },
            "x-name": "endpoints.api.trigger.BuildTriggerActivate",
            "x-path": "/api/v1/repository/{repository}/trigger/{trigger_uuid}/activate",
            "x-tag": "trigger"
        },
        "/api/v1/repository/{repository}/trigger/{trigger_uuid}/builds": {
            "get": {
                "description": "List the builds started by the specified trigger.",
                "operationId": "listTriggerRecentBuilds",
                "parameters": [
                    {
                        "description": "The UUID of the build trigger",
                        "in": "path",
                        "name": "trigger_uuid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The maximum number of builds to return",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "trigger"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The UUID of the build trigger",
                    "in": "path",
                    "name": "trigger_uuid",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.trigger.TriggerBuildList",
            "x-path": "/api/v1/repository/{repository}/trigger/{trigger_uuid}/builds",
            "x-tag": "trigger"
        },
        "/api/v1/repository/{repository}/trigger/{trigger_uuid}/start": {
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "The UUID of the build trigger",
                    "in": "path",
                    "name": "trigger_uuid",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Manually start a build from the specified trigger.",
                "operationId": "manuallyStartBuildTrigger",
                "parameters": [
                    {
                        "description": "The UUID of the build trigger",
                        "in": "path",
                        "name": "trigger_uuid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RunParameters"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:admin"
                        ]
                    }
                ],
                "tags": [
                    "trigger"
                ]
            },
            "x-name": "endpoints.api.trigger.ActivateBuildTrigger",
            "x-path": "/api/v1/repository/{repository}/trigger/{trigger_uuid}/start",
            "x-tag": "trigger"
        },
        "/api/v1/user/": {
            "get": {
                "description": "Get user information for the authenticated user.",
                "operationId": "getLoggedInUser",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successful invocation",
                        "schema": {
                            "$ref": "#/definitions/UserView"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "user:read"
                        ]
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "x-name": "endpoints.api.user.User",
            "x-path": "/api/v1/user/",
            "x-tag": "user"
        },
        "/api/v1/user/aggregatelogs": {
            "get": {
                "description": "Returns the aggregated logs for the current user.",
                "operationId": "getAggregateUserLogs",
                "parameters": [
                    {
                        "description": "Username for which to filter logs.",
                        "in": "query",
                        "name": "performer",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Latest time to which to get logs. (%m/%d/%Y %Z)",
                        "in": "query",
                        "name": "endtime",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Earliest time from which to get logs. (%m/%d/%Y %Z)",
                        "in": "query",
                        "name": "starttime",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "user:admin"
                        ]
                    }
                ],
                "tags": [
                    "logs"
                ]
            },
            "x-name": "endpoints.api.logs.UserAggregateLogs",
            "x-path": "/api/v1/user/aggregatelogs",
            "x-tag": "logs"
        },
        "/api/v1/user/logs": {
            "get": {
                "description": "List the logs for the current user.",
                "operationId": "listUserLogs",
                "parameters": [
                    {
                        "description": "The page token for the next page",
                        "in": "query",
                        "name": "next_page",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Username for which to filter logs.",
                        "in": "query",
                        "name": "performer",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Latest time to which to get logs. (%m/%d/%Y %Z)",
                        "in": "query",
                        "name": "endtime",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Earliest time from which to get logs. (%m/%d/%Y %Z)",
                        "in": "query",
                        "name": "starttime",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "user:admin"
                        ]
                    }
                ],
                "tags": [
                    "logs"
                ]
            },
            "x-name": "endpoints.api.logs.UserLogs",
            "x-path": "/api/v1/user/logs",
            "x-tag": "logs"
        },
        "/api/v1/user/robots": {
            "get": {
                "description": "List the available robots for the user.",
                "operationId": "getUserRobots",
                "parameters": [
                    {
                        "description": "Whether to include repositories and teams in which the robots have permission.",
                        "in": "query",
                        "name": "permissions",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "user:admin"
                        ]
                    }
                ],
                "tags": [
                    "robot"
                ]
            },
            "x-name": "endpoints.api.robot.UserRobotList",
            "x-path": "/api/v1/user/robots",
            "x-tag": "robot"
        },
        "/api/v1/user/robots/{robot_shortname}": {
            "delete": {
                "description": "Delete an existing robot.",
                "operationId": "deleteUserRobot",
                "parameters": [
                    {
                        "description": "The short name for the robot, without any user or organization prefix",
                        "in": "path",
                        "name": "robot_shortname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "user:admin"
                        ]
                    }
                ],
                "tags": [
                    "robot"
                ]
            },
            "get": {
                "description": "Returns the user's robot with the specified name.",
                "operationId": "getUserRobot",
                "parameters": [
                    {
                        "description": "The short name for the robot, without any user or organization prefix",
                        "in": "path",
                        "name": "robot_shortname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "user:admin"
                        ]
                    }
                ],
                "tags": [
                    "robot"
                ]
            },
            "parameters": [
                {
                    "description": "The short name for the robot, without any user or organization prefix",
                    "in": "path",
                    "name": "robot_shortname",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Create a new user robot with the specified name.",
                "operationId": "createUserRobot",
                "parameters": [
                    {
                        "description": "The short name for the robot, without any user or organization prefix",
                        "in": "path",
                        "name": "robot_shortname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "user:admin"
                        ]
                    }
                ],
                "tags": [
                    "robot"
                ]
            },
            "x-name": "endpoints.api.robot.UserRobot",
            "x-path": "/api/v1/user/robots/{robot_shortname}",
            "x-tag": "robot"
        },
        "/api/v1/user/robots/{robot_shortname}/permissions": {
            "get": {
                "description": "Returns the list of repository permissions for the user's robot.",
                "operationId": "getUserRobotPermissions",
                "parameters": [
                    {
                        "description": "The short name for the robot, without any user or organization prefix",
                        "in": "path",
                        "name": "robot_shortname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "user:admin"
                        ]
                    }
                ],
                "tags": [
                    "robot"
                ]
            },
            "parameters": [
                {
                    "description": "The short name for the robot, without any user or organization prefix",
                    "in": "path",
                    "name": "robot_shortname",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.robot.UserRobotPermissions",
            "x-path": "/api/v1/user/robots/{robot_shortname}/permissions",
            "x-tag": "robot"
        },
        "/api/v1/user/robots/{robot_shortname}/regenerate": {
            "parameters": [
                {
                    "description": "The short name for the robot, without any user or organization prefix",
                    "in": "path",
                    "name": "robot_shortname",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Regenerates the token for a user's robot.",
                "operationId": "regenerateUserRobotToken",
                "parameters": [
                    {
                        "description": "The short name for the robot, without any user or organization prefix",
                        "in": "path",
                        "name": "robot_shortname",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "user:admin"
                        ]
                    }
                ],
                "tags": [
                    "robot"
                ]
            },
            "x-name": "endpoints.api.robot.RegenerateUserRobot",
            "x-path": "/api/v1/user/robots/{robot_shortname}/regenerate",
            "x-tag": "robot"
        },
        "/api/v1/user/starred": {
            "get": {
                "description": "List all starred repositories.",
                "operationId": "listStarredRepos",
                "parameters": [
                    {
                        "description": "The page token for the next page",
                        "in": "query",
                        "name": "next_page",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "user:admin"
                        ]
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "description": "Star a repository.",
                "operationId": "createStar",
                "parameters": [
                    {
                        "description": "Request body contents.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewStarredRepository"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "repo:read"
                        ]
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "x-name": "endpoints.api.user.StarredRepositoryList",
            "x-path": "/api/v1/user/starred",
            "x-tag": "user"
        },
        "/api/v1/user/starred/{repository}": {
            "delete": {
                "description": "Removes a star from a repository.",
                "operationId": "deleteStar",
                "parameters": [
                    {
                        "description": "The full path of the repository. e.g. namespace/name",
                        "in": "path",
                        "name": "repository",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2_implicit": [
                            "user:admin"
                        ]
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "parameters": [
                {
                    "description": "The full path of the repository. e.g. namespace/name",
                    "in": "path",
                    "name": "repository",
                    "required": true,
                    "type": "string"
                }
            ],
            "x-name": "endpoints.api.user.StarredRepository",
            "x-path": "/api/v1/user/starred/{repository}",
            "x-tag": "user"
        },
        "/api/v1/users/{username}": {
            "get": {
                "description": "Get user information for the specified user.",
                "operationId": "getUserInformation",
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful invocation"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "401": {
                        "description": "Session required",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                },
                "tags": [
                    "user"
                ]
            },
            "x-name": "endpoints.api.user.Users",
            "x-path": "/api/v1/users/{username}",
            "x-tag": "user"
        },
        "/userfiles/{file_id}": {
            "x-name": "data.userfiles.UserfilesHandlers",
            "x-path": "/userfiles/{file_id}",
            "x-tag": "userfiles"
        }
    },
    "schemes": [
        "https"
    ],
    "securityDefinitions": {
        "oauth2_implicit": {
            "authorizationUrl": "https://quay.io/oauth/authorize",
            "flow": "implicit",
            "scopes": {
                "org:admin": "This application will be able to administer your organizations including creating robots, creating teams, adjusting team membership, and changing billing settings. You should have absolute trust in the requesting application before granting this permission.",
                "repo:admin": "This application will have administrator access to all repositories to which the granting user or robot account has access",
                "repo:create": "This application will be able to create repositories in to any namespaces that the granting user or robot account is allowed to create repositories",
                "repo:read": "This application will be able to view and pull all repositories visible to the granting user or robot account",
                "repo:write": "This application will be able to view, push and pull to all repositories to which the granting user or robot account has write access",
                "user:admin": "This application will be able to administer your account including creating robots and granting them permissions to your repositories. You should have absolute trust in the requesting application before granting this permission.",
                "user:read": "This application will be able to read user information such as username and email address."
            },
            "type": "oauth2"
        }
    },
    "swagger": "2.0",
    "tags": [
        {
            "description": "Billing information, subscriptions, and plan information.",
            "name": "billing"
        },
        {
            "description": "Create, list, cancel and get status/logs of repository builds.",
            "name": "build"
        },
        {
            "description": "API discovery information.",
            "name": "discovery"
        },
        {
            "description": "Error details API",
            "name": "error"
        },
        {
            "description": "Messages API.",
            "name": "globalmessages"
        },
        {
            "description": "List and lookup repository images.",
            "name": "image"
        },
        {
            "description": "Access usage logs for organizations or repositories.",
            "name": "logs"
        },
        {
            "description": "Manage the manifests of a repository.",
            "name": "manifest"
        },
        {
            "description": "Manage organizations, members and OAuth applications.",
            "name": "organization"
        },
        {
            "description": "Manage repository permissions.",
            "name": "permission"
        },
        {
            "description": "Manage default permissions added to repositories.",
            "name": "prototype"
        },
        {
            "description": "List, create and manage repositories.",
            "name": "repository"
        },
        {
            "description": "List, create and manage repository events/notifications.",
            "name": "repositorynotification"
        },
        {
            "description": "Manage repository access tokens (DEPRECATED).",
            "name": "repotoken"
        },
        {
            "description": "Manage user and organization robot accounts.",
            "name": "robot"
        },
        {
            "description": "Conduct searches against all registry context.",
            "name": "search"
        },
        {
            "description": "List and manage repository vulnerabilities and other security information.",
            "name": "secscan"
        },
        {
            "description": "List and manage repository signing information",
            "name": "signing"
        },
        {
            "description": "Manage the tags of a repository.",
            "name": "tag"
        },
        {
            "description": "Create, list and manage an organization's teams.",
            "name": "team"
        },
        {
            "description": "Create, list and manage build triggers.",
            "name": "trigger"
        },
        {
            "description": "Manage the current user.",
            "name": "user"
        },
        {
            "description": "",
            "name": "userfiles"
        }
    ]
}
